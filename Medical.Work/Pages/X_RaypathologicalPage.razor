


@page "/X_RaypathologicalPage"
@using System.Reflection

@inject DialogService? Dialogservice
@inject IDbContextFactory<MedicalDbContext> ContextFactor
@inject UserManager<IdentityUser> Usermanager



<div class="divtop d-flex  align-items-center">

    <div class="  w-100 ">
        <Row RowType="RowType.FormRow" ItemsPerRow="ItemsPerRow.Two">

            <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s => OnSearch())"></Search>

            <button class="createbut fa fa-plus " @onclick="@OnShowDlg"></button>
        </Row>
    </div>
</div>


<div class="">
    <Table TItem="X_raypathological" ShowLoading="true" Items="@x_Raypathologicals" IsPagination="true" IsStriped="true" IsBordered="true" 
            ShowToolbar="true" ShowAddButton="false" ShowEditButton="false"
           ShowDeleteButton="false" OnQueryAsync="@OnQueryPageAsync"  IsAutoRefresh="true"
            ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
        <RowButtonTemplate>
            <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="明细" OnClickCallback="@(() => OnRowDetailedClick(context,2))" />
            <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="编辑" OnClickCallback="@(() => OnRowEditClick(context,2))" />
        </RowButtonTemplate>
    </Table>

</div>

<Message @ref="MessageElement" />







@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    private async Task OnRowEditClick(object obj, int typeofint)
    {
        if (typeofint == 1) await EditX_Raydata(obj as X_rayImaging);

        if (typeofint == 2) await EditX_Raydata(obj as X_raybronchoscopy);

        if (typeofint == 3) await EditX_Raydata(obj as X_raypathological);


    }
    private async Task OnRowDetailedClick(object obj, int typeofint)
    {

    }

    private async Task EditX_Raydata(X_raybronchoscopy x_Raybronchoscopy)
    {
        return;
    }
    private async Task EditX_Raydata(X_rayImaging x_RayImaging)
    {
        return;
    }
    private async Task EditX_Raydata(X_raypathological x_Raypathological)
    {
        return;
    }
}
