

@page "/PD_DrugAllergy_Page"
@page "/PD_DrugAllergy_Page/{Text}/{Name?}"

<div class=" divtop d-flex  align-items-center">

    <div class="  w-100 ">
        <Card>
            <CardHeader>
                查询条件
            </CardHeader>
            <CardBody>
                <Row RowType="RowType.Normal" ItemsPerRow="ItemsPerRow.Two">

                    <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>

                    <button class="createbut fa fa-plus " @onclick="@(()=>OnShowDlg(null))"></button>
                </Row>
            </CardBody>
        </Card>

    </div>
</div>

<div>
    <Card>
        <CardHeader>
            查询结果
        </CardHeader>
        <CardBody>
            <Table TItem="MedicalPD_DrugAllergy" ShowLoading="true" IsPagination="true" IsStriped="true" IsBordered="true"
                   ShowToolbar="true" ShowAddButton="false" ShowEditButton="false"  ShowCardView="true"
                   ShowDeleteButton="false" OnQueryAsync="@OnQueryAsync" IsAutoRefresh="true"  FixedExtendButtonsColumn="true"
                   ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
                <RowButtonTemplate>
                    <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-info" Text=" 详情 "  OnClick="@(()=>OnDetails(context))" ></Button>
                    <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-edit" Text=" 修改 "  OnClick="@(()=>OnEdit(context))" ></Button>
                    <PopConfirmButton Size="Size.ExtraSmall" ConfirmButtonColor="Color.Danger" Icon="fa fa-trash" OnConfirm="@(()=>OnDelete(context))" Placement="Placement.Top" Color="Color.Danger" ConfirmIcon="fa fa-exclamation-triangle text-danger"  Text="删除" Content="确定删除数据吗？" />
            </RowButtonTemplate>
            </Table>
        </CardBody>
    </Card>

</div>
<Message @ref="MessageElement" />

@code {

    [Inject]
    private MessageService messageService { set; get; }

    private Message MessageElement { set; get; }

    [Inject]
    DialogService? dialogService { set; get; }

    [Inject]
    IDbContextFactory<MedicalDbContext> contextFactory { set; get; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { set; get; }

    private string Querywhere { set; get; }

    private List<MedicalPD_DrugAllergy> pD_DrugAllergies { set; get; } = new();

    private MedicalPD_DrugAllergy pD_DrugAllergie { set; get; } = new();

    private bool IsBackdropOpen{ set; get; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Name { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if (Text is not null or "")
        {
            // Task.Run(()=> { ); });
            var obj = new MedicalPD_DrugAllergy();
            obj.Medicalrecordnumber = Text;
            obj.Username = Name;
            await OnShowDlg(obj);
        }
        return;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await OnSearch();
        }
        return;// base.OnAfterRenderAsync(firstRender);
    }


    private async Task OnSearch()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var Adminname = authenticationStateTask.Result.User.Identity.Name;
            if (Querywhere is not null)
            {
                pD_DrugAllergies = await context.MPD_Drugs.AsNoTracking().Where(w => w.Medicalrecordnumber.Contains(Querywhere) || w.Username.Contains(Querywhere)).ToListAsync();

            }
            else
            {
                pD_DrugAllergies = await context.MPD_Drugs.AsNoTracking().Where(w => w.Adminname == Adminname).Take(100).ToListAsync();
            }
        }
        StateHasChanged();
        return; //Task.CompletedTask;
    }

    private Task<QueryData<MedicalPD_DrugAllergy>> OnQueryAsync(QueryPageOptions options)
    {
        // 内存分页
        var items = pD_DrugAllergies.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<MedicalPD_DrugAllergy>()
        {
            Items = items,
            TotalCount = pD_DrugAllergies.Count
            // IsSearch = true
        });
    }

    private async Task OnShowDlg(MedicalPD_DrugAllergy obj)
    {
        var result = await dialogService.ShowModal<PD_DrugAllergy_Dlg>(new ResultDialogOption()
        {
            Title = "新建药敏试验检查",
            BodyContext = obj,
            Size = Size.ExtraSmall,
            ComponentParamters = new Dictionary<string, object>
              {
                //new(nameof(EditReportCard.TemplateParameter), Certificatetemplate),
                      [nameof(PD_DrugAllergy_Dlg.OnEventCallback)]= EventCallback.Factory.Create<MedicalPD_DrugAllergy>(this, v => pD_DrugAllergie = v)
                  }
        });

        if (result == DialogResult.Yes)
        {
            using (var context = contextFactory.CreateDbContext())
            {
                if (pD_DrugAllergie != null)
                {
                   
                    context.MPD_Drugs.Add(pD_DrugAllergie);
                    context.SaveChanges();
                    pD_DrugAllergies.Add(pD_DrugAllergie);
                    ShowColorMessage(Color.Success, "新建药敏试验检查", MessageElement);
                }
            }
            // MessageTagservice.ShowColorMessage(Color.Danger, "医患信息添加成功", MessageElement);
        }
        return;

    }
    public void ShowColorMessage(Color color, string content, Message message)
    {
          message.SetPlacement(Placement.Top);
            messageService?.Show(new MessageOption()
            {
             
                Content = content,
                Icon = "fa fa-info-circle",
                Color = color,
                ShowBar = true,
                ShowDismiss = true,
            }, message);
    }
    private Task OnRowEditClick()
    {
        return Task.CompletedTask;
    }

    private async Task OnEdit(MedicalPD_DrugAllergy myobject)
    {

        MedicalPD_DrugAllergy  pD_DrugAllergy = new MedicalPD_DrugAllergy();
        var retdlg = await dialogService.ShowModal<PD_DrugAllergy_Dlg>(new ResultDialogOption()
            {
                BodyContext = myobject,
                Title = "编辑修改",
                Size = Size.ExtraLarge,
                ComponentParamters = new Dictionary<string, object>
                {
                    [nameof(PD_DrugAllergy_Dlg.OnEventCallback)] = EventCallback.Factory.Create<MedicalPD_DrugAllergy>(this, v => pD_DrugAllergy = v)
                }
            });

        if (retdlg == DialogResult.Yes)
        {
            try
            {
                using (var context = contextFactory.CreateDbContext())
                {
                    context.Update(pD_DrugAllergy);
                    context.SaveChanges();
                    ShowColorMessage(Color.Success, "数据编辑修改成功", MessageElement);

                    Log.Information<MedicalPD_DrugAllergy>(pD_DrugAllergy.ToString()+"-----成功修改------",pD_DrugAllergy);
                }
            }
            catch(Exception sqlex)
            {
                ShowColorMessage(Color.Warning, "数据编辑修改失败，请联系管理员", MessageElement);
                Log.Warning(sqlex.Message);
            }

        }
        StateHasChanged();
    }

    private async Task OnDelete(MedicalPD_DrugAllergy myobject)
    {
        using (var context = contextFactory.CreateDbContext())
        {
            context.MPD_Drugs.Remove(myobject);
            var ok = context.SaveChanges();
            if (ok > 0)
            {
                pD_DrugAllergies.Remove(myobject);
                ShowColorMessage(Color.Info, "注意：数据已经成功删除", MessageElement);
                StateHasChanged();
            }
            else
            {
                ShowColorMessage(Color.Warning, "数据删除失败", MessageElement);

            }
        }

    }
    private async Task OnDetails(MedicalPD_DrugAllergy myobject)
    {
        pD_DrugAllergie = myobject;
        StateHasChanged();
        IsBackdropOpen = IsBackdropOpen? false : true;
    }
}
