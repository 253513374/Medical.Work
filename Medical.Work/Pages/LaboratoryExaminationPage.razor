

@page "/LaboratoryExaminationPage"

@inject IDbContextFactory<MedicalDbContext> contextFactory


<div class="divtop d-flex  align-items-center">

    <div class=" marginlr w-100 ">
        <Row RowType="RowType.FormRow" ItemsPerRow="ItemsPerRow.Two">

            <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>

            <Button OnClick="@OnShowDlg">实验室检查</Button>
        </Row>
    </div>
    
</div>
<div class="marginlr pt-2 ">
   
    <div style="height:auto;"class="row">
        <div class="col-7 col-sm-7 col-lg-7  ">
            <Table TItem="LaboratoryExamination" ShowLoading="true" Items="@laboratoryExaminations" IsPagination="true" IsStriped="true" IsBordered="true" IsMultipleSelect="true"
                   ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
                   ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true" >
                <RowButtonTemplate>
                    <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="查看" OnClickCallback="@(() => OnRowinfoClick(context))"/>
                    @*<TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="编辑" OnClickCallback="@(() => OnRowEditClick(context,1))" />*@
                </RowButtonTemplate>
            </Table>
        </div>
        <div class=" shadow-lg divradius col-5 col-sm-5 col-lg-5 pt-5 d-flex justify-content-center" >
            <h5 class="text-center" style="font-weight:700">实验室检查详细数据</h5> 
            <dl class="row p-1">
                @foreach (var item in keyValuePairs)
                {
                    <dt class="w-50 text-right pr-4">@item.Key</dt>
                    <dd class="w-50">@(item.Value?? "")</dd>
                }
            </dl>
        </div>
     
          
    </div>
   
</div>


@code {

    [Inject]
    public DialogService? Dialog { set; get; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    LaboratoryExamination laboratoryExamination { set; get; } = new();

    List<LaboratoryExamination> laboratoryExaminations { set; get; } = new();

    public Dictionary<string, object?> keyValuePairs { set; get; }


    public string Querywhere { set; get; }

    protected override  Task OnInitializedAsync()
    {

        keyValuePairs = DisplayAttributeExtend.GetAttributeExtends<LaboratoryExamination>(laboratoryExamination);

        return base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            laboratoryExaminations = await GetLaboratoryExaminations();
            StateHasChanged();
        }
        return;
    }
    private async Task  OnShowDlg()
    {
        var retdlg= await Dialog.ShowModal<LaboratoryExaminationDlg>(new ResultDialogOption()
        {
            BodyContext = new LaboratoryExamination(),
            Title = "实验室检查",
            Size = Size.ExtraLarge,
            ComponentParamters = new KeyValuePair<string, object>[]
            {
                new(nameof(LaboratoryExaminationDlg.OnEventCallback), EventCallback.Factory.Create<LaboratoryExamination>(this, v => laboratoryExamination = v))
            }

        });

        if(retdlg==DialogResult.Yes)
        {
            using (var context = contextFactory.CreateDbContext())
            {

                laboratoryExamination.Adminuser = authenticationStateTask.Result.User.Identity.Name;
                laboratoryExamination.Createtime = DateTime.Now;
                context.laboratoryExaminations.Add(laboratoryExamination);
                context.SaveChanges();
            }

        }
        StateHasChanged();
        return ;
    }

    private async Task OnSearch()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var name = authenticationStateTask.Result.User.Identity.Name;
            if (Querywhere != null)
            {

                laboratoryExaminations = await context.laboratoryExaminations.AsNoTracking().Where(w => w.Adminuser == name).Where(w => w.Medicalrecordnumber.Contains(Querywhere) || w.Name.Contains(Querywhere)).ToListAsync();


            }
            else
            {
                laboratoryExaminations = await context.laboratoryExaminations.AsNoTracking().Where(w => w.Adminuser == name).ToListAsync();

            }
            StateHasChanged();
        }

    }

    private async Task<List<LaboratoryExamination>> GetLaboratoryExaminations()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            return await context.laboratoryExaminations.Where(w => w.Createtime > DateTime.Now.AddDays(-30)).ToListAsync();
        }
    }

    private async Task OnRowinfoClick(LaboratoryExamination  examination)
    {
        keyValuePairs = DisplayAttributeExtend.GetAttributeExtends<LaboratoryExamination>(examination);

        StateHasChanged();
    }

    //private Task<QueryData<LaboratoryExamination>> OnRefreshQueryAsync(QueryPageOptions options)
    //{
    //    return Task.FromResult(new QueryData<LaboratoryExamination>()
    //    {
    //        Items = items,
    //        TotalCount = total
    //    });
    //}
}
