

@page "/LaboratoryExaminationPage"

@page "/LaboratoryExaminationPage/{Text}/{Name?}"

@inject IDbContextFactory<MedicalDbContext> contextFactory


<div class=" divtop d-flex  align-items-center">

    <div class="  w-100 ">

        <Card>
            <CardHeader>
                查询条件
            </CardHeader>
            <CardBody>
                <Row  RowType="RowType.Normal" ItemsPerRow="ItemsPerRow.Two" style="height:75px">

                    <div style="align-items:center;height:75px;">
                         <Search  IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>
                    </div>

                   
                    <button class="createbut fa fa-plus" @onclick="@(()=>OnShowDlg(null))"></button>
                </Row>
            </CardBody>
        </Card>

    </div>
</div>

<div class="marginlr pt-2 ">
    <div style="height:100%;" class="row">
        <div class="col-7 col-sm-7 col-lg-7  ">
            <Card>
                <CardHeader>
                    查询结果
                </CardHeader>
                <CardBody>
                    <Table TItem="LaboratoryExamination" ShowLoading="true" IsPagination="true"
                           IsStriped="true" IsBordered="true" IsAutoRefresh="true"
                           ShowToolbar="true" ShowAddButton="false" ShowEditButton="false"
                           ShowDeleteButton="false" OnQueryAsync="@OnQueryPageAsync"
                           ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
                        <RowButtonTemplate>
                            <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-info" Text=" 详情 "  OnClick="@(()=>OnDetails(context))" ></Button>
                            <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-edit" Text=" 修改 "  OnClick="@(()=>OnEdit(context))" ></Button>
                            <PopConfirmButton Size="Size.ExtraSmall" ConfirmButtonColor="Color.Danger" Icon="fa fa-trash" OnConfirm="@(()=>OnDelete(context))" Placement="Placement.Top" Color="Color.Danger" ConfirmIcon="fa fa-exclamation-triangle text-danger"  Text="删除" Content="确定删除数据吗？" />
                        </RowButtonTemplate>
                     @*   <RowButtonTemplate>
                            <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="查看" OnClickCallback="@(() => OnRowinfoClick(context))" />
                            <TableCellButton Size="Size.ExtraSmall" Color="Color.Warning" Icon="fa fa-edit" Text="删除" OnClickCallback="@(() => Ondel(context))" />
                        </RowButtonTemplate>*@
                    </Table>
                </CardBody>
            </Card>

        </div>
        <div class="curved_box col-4 col-sm-4 col-lg-4 pt-4 d-flex justify-content-center">
            <div class="shuli">实验室检查详细数据</div>
            <dl class="row p-1">
                @foreach (var item in keyValuePairs)
                {
                    <dt class=" text-right pr-4" style="width:70%">@item.Key</dt>
                    <dd class="" style="width:30%">@(item.Value?? "")</dd>
                }
            </dl>
        </div>
    </div>
</div>

<Message @ref="MessageElement" />


@code {

    [Inject]
    public DialogService? Dialog { set; get; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    [Inject]
    private MessageService messageService { set; get; }

    private Message MessageElement { set; get; }

    LaboratoryExamination laboratoryExamination { set; get; } = new();

    List<LaboratoryExamination> laboratoryExaminations { set; get; } = new();

    public Dictionary<string, object?> keyValuePairs { set; get; }

    private bool IsBackdropOpen{ set; get; }
    public string Querywhere { set; get; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Name { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Text is not null or "")
        {
            // Task.Run(()=> { ); });
            var obj = new LaboratoryExamination();
            obj.Medicalrecordnumber = Text;
            obj.Username = Name;
            await OnShowDlg(obj);
        }
        return;
    }


    protected override async Task OnInitializedAsync()
    {

        keyValuePairs = DisplayAttributeExtend.GetAttributeExtends<LaboratoryExamination>(laboratoryExamination);

        return;// base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            laboratoryExaminations = await GetLaboratoryExaminations();
            StateHasChanged();
        }
        return;
    }
    private async Task OnShowDlg(LaboratoryExamination obj)
    {
        LaboratoryExamination laboratory = new LaboratoryExamination();
        var retdlg = await Dialog.ShowModal<LaboratoryExaminationDlg>(new ResultDialogOption()
        {
            BodyContext = obj,
            Title = "实验室检查",
            Size = Size.Large,
            ComponentParamters = new Dictionary<string, object>
            {
               [nameof(LaboratoryExaminationDlg.OnEventCallback)]= EventCallback.Factory.Create<LaboratoryExamination>(this, v => laboratoryExamination = v)
            }

        });

        if (retdlg == DialogResult.Yes)
        {
            using (var context = contextFactory.CreateDbContext())
            {
                context.laboratoryExaminations.Add(laboratory);
                context.SaveChanges();
                ShowColorMessage(Color.Success, "数据添加成功", MessageElement);
                Log.Information($"实验室数据添加成功:数据id{obj.Username}:{obj.Medicalrecordnumber}");
                if(laboratoryExaminations is not null)
                {
                    laboratoryExaminations.Add(laboratory);
                }
            }

        }
        StateHasChanged();
        return;
    }
    private async Task OnEdit(LaboratoryExamination obj)
    {
        LaboratoryExamination examination = new LaboratoryExamination();
        var retdlg = await Dialog.ShowModal<LaboratoryExaminationDlg>(new ResultDialogOption()
            {
                BodyContext = obj,
                Title = "编辑修改",
                Size = Size.ExtraLarge,
                ComponentParamters = new Dictionary<string, object>
                {
                    [nameof(LaboratoryExaminationDlg.OnEventCallback)] = EventCallback.Factory.Create<LaboratoryExamination>(this, v => examination = v)
                }
            });
        if (retdlg == DialogResult.Yes)
        {
            try
            {
                using (var context = contextFactory.CreateDbContext())
                {
                    context.Update(examination);
                    context.SaveChanges();
                }
            }catch(Exception ex)
            {
                Log.Warning(ex.StackTrace);
            }
        }
        StateHasChanged();
    }

    private async Task OnDelete(LaboratoryExamination obj)
    {
        using (var context = contextFactory.CreateDbContext())
        {
            context.laboratoryExaminations.Remove(obj);
            var ok = context.SaveChanges();
            if (ok > 0)
            {
                ShowColorMessage(Color.Success, "数据删除成功", MessageElement);
                laboratoryExaminations.Remove(obj);
                StateHasChanged();

                 Log.Information($"给药方案数据删除成功:数据id{obj.Username}:{obj.Medicalrecordnumber}");
            }
            else
            {
                ShowColorMessage(Color.Warning, "数据删除失败", MessageElement);
                Log.Information($"给药方案数据删除失败:数据id{obj.Username}:{obj.Medicalrecordnumber}");
            }

        }
        StateHasChanged();
    }


    private async Task OnDetails(LaboratoryExamination  laboratory)
    {
        keyValuePairs = DisplayAttributeExtend.GetAttributeExtends<LaboratoryExamination>(laboratory);

       // laboratoryExamination = laboratory;
        StateHasChanged();
        IsBackdropOpen = IsBackdropOpen? false : true;
    }
    private Task<QueryData<LaboratoryExamination>> OnQueryPageAsync(QueryPageOptions options)
    {
        var items = laboratoryExaminations.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems);
        return Task.FromResult(new QueryData<LaboratoryExamination>()
        {
            Items = items,
            TotalCount = laboratoryExaminations.Count()
        });

    }

    private async Task OnSearch()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var name = authenticationStateTask.Result.User.Identity.Name;
            if (Querywhere != null)
            {

                laboratoryExaminations = await context.laboratoryExaminations.AsNoTracking().Where(w => w.Adminname == name).Where(w => w.Medicalrecordnumber.Contains(Querywhere) || w.Username.Contains(Querywhere)).ToListAsync();
            }
            else
            {
                laboratoryExaminations = await context.laboratoryExaminations.AsNoTracking().Where(w => w.Adminname == name).OrderByDescending(o=>o.Createtime).Take(100).ToListAsync();

            }
            StateHasChanged();
        }

    }

    private async Task<List<LaboratoryExamination>> GetLaboratoryExaminations()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var name = authenticationStateTask.Result.User.Identity.Name;
            return await context.laboratoryExaminations.Where(w => w.Adminname == name).Take(100).ToListAsync();
        }
    }

    private async Task OnRowinfoClick(LaboratoryExamination examination)
    {
      
        StateHasChanged();
    }

    public void ShowColorMessage(Color color, string content, Message message)
    {
        message.SetPlacement(Placement.Top);
        messageService?.Show(new MessageOption()
            {

                Content = content,
                Icon = "fa fa-info-circle",
                Color = color,
                ShowBar = true,
                ShowDismiss = true,
            }, message);
    }
}
