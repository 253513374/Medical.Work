

@page "/X_RayBronchoscopyPage"
@page "/X_RayBronchoscopyPage/{Text}/{Name?}"

    


    @inject DialogService? dialogService
    @inject IDbContextFactory<MedicalDbContext> contextFactory
    @inject UserManager<IdentityUser> Usermanager



    <div class="divtop d-flex  align-items-center">

        <div class="  w-100 ">
            <Card>
                <CardHeader>
                    查询条件
                </CardHeader>
                <CardBody>
                    <Row RowType="RowType.Normal" ItemsPerRow="ItemsPerRow.Two">

                        <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>

                        <button class="createbut fa fa-plus " @onclick="@(()=>OnShowDlg(null))"></button>
                    </Row>
                </CardBody>
            </Card>

        </div>
    </div>

    <div class="w-100">

        <Card>
            <CardHeader>
                查询结果
            </CardHeader>
            <CardBody>
                <Table TItem="X_raybronchoscopy" ShowLoading="true" IsPagination="true"
                       IsStriped="true" IsBordered="true" IsAutoRefresh="true"
                       ShowToolbar="true" ShowAddButton="false" ShowEditButton="false"
                       ShowDeleteButton="false" OnQueryAsync="@OnQueryPageAsync"
                       ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
                        <RowButtonTemplate>
                            <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-info" Text=" 详情 "  OnClick="@(()=>OnDetails(context))" ></Button>
                            <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-edit" Text=" 修改 "  OnClick="@(()=>OnEdit(context))" ></Button>
                            <PopConfirmButton Size="Size.ExtraSmall" ConfirmButtonColor="Color.Danger" Icon="fa fa-trash" OnConfirm="@(()=>OnDelete(context))" Placement="Placement.Top" Color="Color.Danger" ConfirmIcon="fa fa-exclamation-triangle text-danger"  Text="删除" Content="确定删除数据吗？" />
                        </RowButtonTemplate>
                   @* <RowButtonTemplate>
                        <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="明细" OnClickCallback="@(() => OnRowDetailedClick(context,2))" />
                        <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="编辑" OnClickCallback="@(() => OnRowEditClick(context,2))" />
                    </RowButtonTemplate>*@
                </Table>
            </CardBody>
        </Card>

    </div>
    <Message @ref="MessageElement" />
    @code {

        private string Querywhere { set; get; }

        private bool IsBackdropOpen { set; get; }


        [CascadingParameter]
        private Task<AuthenticationState> authenticationStateTask { get; set; }

        private X_raybronchoscopy x_Raybronchoscopy { set; get; }

        private List<X_raybronchoscopy> x_Raybronchoscopies { set; get; } = new();

        [Inject]
        private MessageService messageService { set; get; }

        private Message MessageElement { set; get; }

        private MedicalDbContext context { set; get; }


        [Parameter]
        public string Text { get; set; }

        [Parameter]
        public string Name { get; set; }
        protected override async Task OnParametersSetAsync()
        {
            if (Text is not null or "")
            {
                // Task.Run(()=> { ); });
                var obj = new X_raybronchoscopy();
                obj.Medicalrecordnumber = Text;
                obj.Username = Name;
                await OnShowDlg(obj);
            }
            return;// base.OnParametersSetAsync();
        }



        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                context = contextFactory.CreateDbContext();
                await OnSearch();
            }
            return;// await base.OnAfterRenderAsync(firstRender);
        }




        private async Task OnSearch()
        {
            var Username = authenticationStateTask.Result.User.Identity.Name;
            DateTime dateTime = DateTime.Now.AddDays(-30);
            if (Querywhere is null)
            {
                x_Raybronchoscopies = await context.X_raybronchoscopys.AsNoTracking().Where(w => w.Adminname == Username).Take(100).ToListAsync();
            }
            else
            {
                x_Raybronchoscopies = await context.X_raybronchoscopys.AsNoTracking().Where(w => w.Adminname == Username).Where(w => w.Medicalrecordnumber.Contains(Querywhere) || w.Username.Contains(Querywhere)).ToListAsync();

            }
            StateHasChanged();
            return;// Task.CompletedTask;
        }

        private Task<QueryData<X_raybronchoscopy>> OnQueryPageAsync(QueryPageOptions options)
        {
            var items = x_Raybronchoscopies.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems);
            return Task.FromResult(new QueryData<X_raybronchoscopy>()
            {
                Items = items,
                TotalCount = x_Raybronchoscopies.Count()
            });

        }

        private async Task OnShowDlg(X_raybronchoscopy _Raybronchoscopy)
        {

          
            var result = await dialogService.ShowModal<X_raybronchoscopyDlg>(new ResultDialogOption()
            {
                Title = "新建纤维支气管镜检查",
                BodyContext = _Raybronchoscopy,

                ComponentParamters = new Dictionary<string, object>
                 {
                      [nameof(X_raybronchoscopyDlg.OnEventCallback)]= EventCallback.Factory.Create<X_raybronchoscopy>(this, v => x_Raybronchoscopy = v)
                 }
            });

            if (result == DialogResult.Yes)
            {
                // MessageTagservice.ShowColorMessage(Color.Danger, "医患信息添加成功", MessageElement);
                using (var context = contextFactory.CreateDbContext())
                {
                    if (x_Raybronchoscopy != null)
                    {
                     
                        context.X_raybronchoscopys.Add(x_Raybronchoscopy);
                        context.SaveChanges();
                        x_Raybronchoscopies.Add(x_Raybronchoscopy);
                        ShowColorMessage(Color.Success, "纤维支气管镜检查添加成功", MessageElement);
                    }
                }
            }
            return;
        }

    private async Task OnEdit(X_raybronchoscopy myobject)
    {

        X_raybronchoscopy  raybronchoscopy = new X_raybronchoscopy();
        var retdlg = await dialogService.ShowModal<X_raybronchoscopyDlg>(new ResultDialogOption()
            {
                BodyContext = myobject,
                Title = "编辑修改",
                Size = Size.ExtraSmall,
                ComponentParamters = new Dictionary<string, object>
                {
                    [nameof(X_raybronchoscopyDlg.OnEventCallback)] = EventCallback.Factory.Create<X_raybronchoscopy>(this, v => raybronchoscopy = v)
                }
            });

        if (retdlg == DialogResult.Yes)
        {
            try
            {
                using (var context = contextFactory.CreateDbContext())
                {
                    context.Update(raybronchoscopy);
                    context.SaveChanges();
                    ShowColorMessage(Color.Success, "数据编辑修改成功", MessageElement);
                    Log.Information<X_raybronchoscopy>(raybronchoscopy.ToString()+"-----成功修改------",raybronchoscopy);
                }
            }
            catch(Exception sqlex)
            {
                ShowColorMessage(Color.Warning, "数据编辑修改失败，请联系管理员", MessageElement);
                Log.Warning(sqlex.Message);
            }
        }
        StateHasChanged();
    }

    private async Task OnDelete(X_raybronchoscopy myobject)
    {
        using (var context = contextFactory.CreateDbContext())
        {
            context.X_raybronchoscopys.Remove(myobject);
            var ok = context.SaveChanges();
            if (ok > 0)
            {
                x_Raybronchoscopies.Remove(myobject);
                ShowColorMessage(Color.Info, "注意：数据已经成功删除", MessageElement);
                StateHasChanged();
            }
            else
            {
                ShowColorMessage(Color.Warning, "数据删除失败", MessageElement);

            }
        }

    }
    private async Task OnDetails(X_raybronchoscopy myobject)
    {
        x_Raybronchoscopy = myobject;
        StateHasChanged();
        IsBackdropOpen = IsBackdropOpen? false : true;
    }

    public void ShowColorMessage(Color color, string content, Message message)
    {
        message.SetPlacement(Placement.Top);
        messageService?.Show(new MessageOption()
        {

            Content = content,
            Icon = "fa fa-info-circle",
            Color = color,
            ShowBar = true,
            ShowDismiss = true,
        }, message);
    }
}
