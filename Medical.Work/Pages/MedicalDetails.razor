@page "/MedicalDetails/{guid?}"
@using System.Reflection
@using System.ComponentModel


<div class="divtop w-100">
    <div class=" content px-4 ">

        <div class="d-flex align-items-center pl-5">
            <h1>患者详情信息</h1>
        </div>
        <div class="row d-flex justify-content-between align-items-center margintop">
        </div>
    </div>

</div>
<div class="m-3">
    <div class="row">
        <div class="col-5">
            <h2>基本信息</h2>
            <dl class="row">


                @foreach (var item in keyValuePairs)
                {
                    <dt class="col-sm-3">@item.Key</dt>
                    <dd class="col-sm-9">@(item.Value?? "")</dd>
                }


                @*<dt class="col-sm-3">Term</dt>
                <dd class="col-sm-9">
                    <p>Definition for the term.</p>
                    <p>And some more placeholder definition text.</p>
                </dd>

                <dt class="col-sm-3">Another term</dt>
                <dd class="col-sm-9">This definition is short, so no extra paragraphs or anything.</dd>

                <dt class="col-sm-3 text-truncate">Truncated term is truncated</dt>
                <dd class="col-sm-9">This can be useful when space is tight. Adds an ellipsis at the end.</dd>

                <dt class="col-sm-3">Nesting</dt>
                <dd class="col-sm-9">
                    <dl class="row">
                        <dt class="col-sm-4">Nested definition list</dt>
                        <dd class="col-sm-8">I heard you like definition lists. Let me put a definition list inside your definition list.</dd>
                    </dl>
                </dd>*@
            </dl>
        </div>
        <div class="col-7">

        </div>
    </div>
    <div class="row">

    </div>
</div>
<h1>@guid.ToString()</h1>

@code {
    [Parameter]
    public string guid { set; get;}

    [Parameter]
    public PatientInfo patientInfo { set; get; }


    [Inject]
    public MedicalDbContext MedicalDb { set; get; }


    public  Dictionary<string, object?> keyValuePairs{ set; get; }

    protected override void OnParametersSet()
    {
        guid = guid ?? "fantastic";

        patientInfo = MedicalDb.patientInfos.Where(w => w.PatientInfoGuid == guid).FirstOrDefault();

        keyValuePairs = GetAttributes<PatientInfo>(patientInfo);
        base.OnParametersSet();
    }


    private Dictionary<string, object?> GetAttributes<T>( T t)
    {
        Type type = typeof(T);
        PropertyInfo[] properties = type.GetProperties();
        Dictionary<string, object?> dic = new Dictionary<string, object?>();
        foreach (var p in properties)
        {
            //display名字
            var name = p.GetCustomAttribute<DisplayNameAttribute>().DisplayName;
            //对应的值

            var property =   t.GetType().GetProperty(p.Name).GetValue(t, null);

          
            var value = property ?? null;

            dic.Add(name, value);
        }
        return dic;
    }

}
