
@page "/MedicalPKPage"

@page "/MedicalPKPage/{Text}/{Name?}"

@inject IDbContextFactory<MedicalDbContext> contextFactory
@inject NavigationManager navigationManager

@*给药方案*@
<div class=" divtop  w-100 d-flex align-items-center">
    <div class="marginlr w-100">
        <Card>
            <CardHeader>
                查询条件
            </CardHeader>
            <CardBody>
                <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Normal">
                    <Search @bind-Value="@Querywhere" @onclick="@(s=>OnQuerywhere())"></Search>
                    <button class="createbut fa fa-plus" @onclick="@(()=>OnShowDlg(null))"></button>
                 @*   <button class="createbut fa fa-plus" @onclick="@(()=>OnIsOpenDrawer(null))"></button>*@
                </Row>
            </CardBody>
        </Card>
    </div>
</div>
<div class="marginlr pt-3">
    <Card>
        <CardHeader>
            查询结果
        </CardHeader>
        <CardBody>
            <Table TItem="MedicalPK" ShowLoading="true" HeaderStyle="TableHeaderStyle.Light" IsPagination="true"
                   IsStriped="true" IsBordered="true" IsMultipleSelect="false" AllowResizing="true"
                   ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
                   ShowExtendButtons="true" ShowColumnList="true" OnQueryAsync="@OnQueryAsync" IsAutoRefresh="true">
                @*/*药品通用名，溶媒（如0.9% 氯化钠100ml）,单次剂量，给药频率，给药途径，开始时间，截止时间，公斤体质量日剂量，厂家类型*/*@
                <TableColumns>
                    <TableColumn @bind-Field="@context.DrugsNmae"></TableColumn>
                    <TableColumn @bind-Field="@context.DrugSolvent"></TableColumn>
                    <TableColumn @bind-Field="@context.SolventToDosage"></TableColumn>
                    <TableColumn @bind-Field="@context.Drugdosage"></TableColumn>
                    <TableColumn @bind-Field="@context.DrugNCount"></TableColumn>
                    <TableColumn @bind-Field="@context.DrugdosageRoute"></TableColumn>
                    <TableColumn @bind-Field="@context.FirstTime"></TableColumn>
                    <TableColumn @bind-Field="@context.LasttTime"></TableColumn>
                    <TableColumn @bind-Field="@context.AMTsingledose"></TableColumn>
                    <TableColumn @bind-Field="@context.Manufacturertype"></TableColumn>
                </TableColumns>

                <RowButtonTemplate>
                    <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-info" Text=" 详情 "  OnClick="@(()=>OnDetails(context))" ></Button>
                    <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-edit" Text=" 修改 "  OnClick="@(()=>OnEdit(context))" ></Button>
                    <PopConfirmButton Size="Size.ExtraSmall" ConfirmButtonColor="Color.Danger" Icon="fa fa-trash" OnConfirm="@(()=>OnDelete(context))" Placement="Placement.Top" Color="Color.Danger" ConfirmIcon="fa fa-exclamation-triangle text-danger"  Text="删除" Content="确定删除数据吗？" />
         
                </RowButtonTemplate>
            </Table>
        </CardBody>
    </Card>

    <Drawer Width="500px" Placement="Placement.Left" @bind-IsOpen="@IsBackdropOpen" IsBackdrop="true">
    @if(Medical is not null)
    {
          <p class="mt-3 text-center">
             <Card Class="w-100">
                 <CardHeader>
                     <p class="h3">@Medical.MedicalPKName</p>
                     <div >
                          <p class="h4 " style="text-align:left">名称：@Medical.Username</p>
                          <p class="h4 " style="text-align:left" >编号：@Medical.Medicalrecordnumber</p>
                     </div>
                   
                 </CardHeader>
                <CardBody>
                    <Row ItemsPerRow="ItemsPerRow.One">
                        <dl class="row " style="text-align:left">
                          <dt class="col-sm-5">起始给药日期：</dt>
                          <dd class="col-sm-7">@Medical.FirstTime</dd>

                           <dt class="col-sm-5">结束给药日期：</dt>
                          <dd class="col-sm-7">@Medical.LasttTime</dd>

                           <dt class="col-sm-5">药品通用名：</dt>
                          <dd class="col-sm-7">@Medical.DrugsNmae</dd>

                           <dt class="col-sm-5">药品商品名：</dt>
                          <dd class="col-sm-7">@Medical.DrugsNmae2</dd>

                           <dt class="col-sm-5">药品规格：</dt>
                          <dd class="col-sm-7">@Medical.DrugSpecifications</dd>

                           <dt class="col-sm-5">厂家类型：</dt>
                          <dd class="col-sm-7">@Medical.Manufacturertype</dd>

                           <dt class="col-sm-5">药品剂量：</dt>
                          <dd class="col-sm-7">@Medical.Drugdosage</dd>

                           <dt class="col-sm-5">药品剂量单位：</dt>
                          <dd class="col-sm-7">@Medical.DrugdosageUnit</dd>

                           <dt class="col-sm-5">给药途径：</dt>
                          <dd class="col-sm-7">@Medical.DrugdosageRoute</dd>

                           <dt class="col-sm-5">给药频率：</dt>
                          <dd class="col-sm-7">@Medical.DrugNCount</dd>

                           <dt class="col-sm-5">溶媒：</dt>
                          <dd class="col-sm-7">@Medical.DrugSolvent</dd>

                           <dt class="col-sm-5">溶媒剂量：</dt>
                          <dd class="col-sm-7">@Medical.SolventToDosage</dd>

                           <dt class="col-sm-5">公斤体质量日剂量：</dt>
                          <dd class="col-sm-7">@Medical.AMTsingledose</dd>

                           <dt class="col-sm-5">给药持续时间：</dt>
                          <dd class="col-sm-7">@Medical.DrugNCountDuration</dd>
                        </dl>
                    </Row>
                 
                    <div class="d-flex align-content-center justify-content-end"> <p class="text-muted font-weight-light text-monospace"><small>表单记录时间：@Medical.Createtime</small></p></div>
                </CardBody>
             </Card>
          </p>
    }

</Drawer>


<Message @ref="@MessageElement"></Message>

</div>




@code {

    private MedicalPK Medical{ set; get; }

    private List<MedicalPK> medicalPK_s { set; get; } = new();

    private bool IsBackdropOpen { set; get; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Inject]
    private MessageService messageService { set; get; }

    private Message MessageElement { set; get; }


    protected override async Task OnParametersSetAsync()
    {
        if (Text is not null or "")
        {
            // Task.Run(()=> { ); });
            var obj = new MedicalPK();
            obj.Medicalrecordnumber = Text;
            obj.Username = Name;
            await OnShowDlg(obj);
        }
        return;
    }


    protected override async Task OnInitializedAsync()
    {
        await OnQuerywhere();
        return;
        //return base.OnInitializedAsync();
    }



    private async Task OnEdit(MedicalPK medical)
    {
        var retdlg = await Dialog.ShowModal<MedicalPKDlg>(new ResultDialogOption()
            {
                BodyContext = medical,
                Title = "编辑修改",
                Size = Size.ExtraLarge,
                ComponentParamters = new Dictionary<string, object>
                {
                    [nameof(MedicalPKDlg.OnEventCallback)] = EventCallback.Factory.Create<MedicalPK>(this, v => medicalPK = v)
                }
            });
        if (retdlg == DialogResult.Yes)
        {
            try
            {
                using (var context = contextFactory.CreateDbContext())
                {
                    context.Update(medicalPK);
                    context.SaveChanges();
                }
            }catch(Exception ex)
            {
                Log.Warning(ex.StackTrace);
            }

        }
        StateHasChanged();
    }

    private async Task OnDelete(MedicalPK medicalPK)
    {
        using (var context = contextFactory.CreateDbContext())
        {
            context.MPKs.Remove(medicalPK);
            var ok = context.SaveChanges();
            if (ok > 0)
            {
                ShowColorMessage(Color.Success, "数据删除成功", MessageElement);
                medicalPK_s.Remove(medicalPK);
                StateHasChanged();

                 Log.Information($"给药方案数据删除成功:数据id{medicalPK.Username}:{medicalPK.Medicalrecordnumber}");
            }
            else
            {
                ShowColorMessage(Color.Warning, "数据删除失败", MessageElement);
                Log.Information($"给药方案数据删除失败:数据id{medicalPK.Username}:{medicalPK.Medicalrecordnumber}");
            }

        }
        StateHasChanged();
    }


    private async Task OnDetails(MedicalPK medicalPK)
    {
        Medical = medicalPK;
        StateHasChanged();
        IsBackdropOpen = IsBackdropOpen? false : true;
    }


    private Task<QueryData<MedicalPK>> OnQueryAsync(QueryPageOptions options)
    {
        // 内存分页
        var items = medicalPK_s.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<MedicalPK>()
        {
            Items = items,
            TotalCount = medicalPK_s.Count
            // IsSearch = true
        });
    }

     public void ShowColorMessage(Color color, string content, Message message)
    {
          message.SetPlacement(Placement.Top);
            messageService?.Show(new MessageOption()
            {
             
                Content = content,
                Icon = "fa fa-info-circle",
                Color = color,
                ShowBar = true,
                ShowDismiss = true,
            }, message);
    }
}
