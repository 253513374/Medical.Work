
@page "/MedicalPKPage"

@inject IDbContextFactory<MedicalDbContext> contextFactory
@inject NavigationManager navigationManager


<div class=" divtop  w-100 d-flex align-items-center">
    <div class="marginlr w-100">
        <Row ItemsPerRow="ItemsPerRow.Two">
            <Search @bind-Value="@Querywhere"></Search>
            <Button @onclick="@OnShowDlg">给药方案</Button>
        </Row>
    </div>
</div>
<div class="marginlr pt-3">
    <Table TItem="MedicalPK" ShowLoading="true"  HeaderStyle="TableHeaderStyle.Light" Items="@medicalPKs" IsPagination="true" IsStriped="true" IsBordered="true" IsMultipleSelect="true"
           ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
           ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
        <RowButtonTemplate>
            @*<TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="明细" OnClickCallback="@(() => OnRowDetailedClick(context))" />*@
            <TableCellButton Size="Size.Medium" Color="Color.Info" Icon="fa fa-edit" Text="操作" OnClickCallback="@(() => OnRowEditClick(context))" />
        </RowButtonTemplate>
    </Table>
</div>

    @code {

        private List<MedicalPK> medicalPKs { set; get; } = new();

        protected override async void OnAfterRender(bool firstRender)
        {
            if(firstRender)
            {
                medicalPKs =await GetmedicalPK();
                StateHasChanged();
            }
            base.OnAfterRender(firstRender);
        }

}
