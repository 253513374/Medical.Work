
@page "/MedicalPKDetailsPage"
@*@page "/MedicalPKDetailsPage/{Text}/{Name?}""*@

@inject IDbContextFactory<MedicalDbContext> contextFactory

    @*采样信息*@

<div class=" divtop d-flex  align-items-center">

    <div class="  w-100 ">

        <Card>
            <CardHeader>
                查询条件
            </CardHeader>
            <CardBody>
                <Row RowType="RowType.Normal" ItemsPerRow="ItemsPerRow.Two">

                    <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>

                    <button class="createbut fa fa-plus" @onclick="@(()=>OnShowDlg(null))"></button>
                </Row>
            </CardBody>
        </Card>

    </div>
</div>

<div class="w-100">
    <Card>
        <CardHeader>
            查询结果
        </CardHeader>
        <CardBody>
            <Table TItem="MedicalPKSampling" ShowLoading="true" IsPagination="true" IsStriped="true" IsBordered="true"
                   ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
                   OnQueryAsync="@OnQueryAsync" IsAutoRefresh="true"
                   ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
                <RowButtonTemplate>
                    @* <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="明细" OnClickCallback="@(() => OnRowDetailedClick(context,1))" />*@
                    <TableCellButton Size="Size.ExtraSmall" Color="Color.Warning" Icon="fa fa-edit" Text="删除" OnClickCallback="@(() => Ondel(context))" />
                </RowButtonTemplate>
            </Table>
        </CardBody>
    </Card>

</div>
<Message @ref="MessageElement" />




@*<div class="  w-100 d-flex align-items-center justify-content-center">
        <div class=" w-100 marginlr row d-flex justify-content-between " style="min-height:700px; ">

            <div class=" col-4 shadow-lg divradius p-4">
                @if (keyValuePairs is not null)
                {
                    foreach (var item in keyValuePairs)
                    {
                        <div class="row d-flex justify-content-center">
                            <div class="col-8 text-right pr-4"> <h5>@item.Key</h5></div>
                            <div class="col-4 text-left pl-1"> <p>@item.Value</p></div>
                        </div>
                    }
                }
            </div>

            <div class="col-6 shadow-lg divradius p-4">
                <div class="d-flex justify-content-between">
                    <p class="h3"> 绑定信息采集单 </p>
                    <Button class="oi oi-plus" Size="Size.Large" @onclick="@(s => OnBing())">新增</Button>
                </div>
                <div class=" d-flex align-items-center">
                    <div class="row ">

                        @if (medicalPKDatetimeSamplings is not null)
                        {
                            var items = medicalPKDatetimeSamplings.GroupBy(g => g.medicalPK.DrugsNmae).Select(s => new { name = s.Key, mcount = s.ToList() }).ToList();
                            foreach (var item in items)
                            {
                                <div class="p-2">
                                    <Button Color="Color.Primary">
                                        <i class="fa fa-file-text"></i>
                                        <span>@item.name</span>
                                        <Badge Color="Color.Danger">@item.mcount.Count</Badge>
                                    </Button>
                                </div>
                            }
                        }
                    </div>

                </div>
            </div>

        </div>

    </div>*@

<div class="marginlr w-100 mt-2">

    @*@if (medicalPK is not null)
        {
            if (medicalPK.MedicalPKSamplings is not null)
            {
                var items = medicalPK.MedicalPKSamplings;*@
    @if (pKSamplings is not null)
    {
        <ListView TItem="MedicalPKSampling"  OnQueryAsync="@OnQueryAsync" Pageable="true">
            <HeaderTemplate> 采样信息列表</HeaderTemplate>
            <BodyTemplate>
                <Card Class="w-100">

                    <CardBody>
                        <Row ItemsPerRow="ItemsPerRow.One">
                            <div>采集日期： @context.CollectDateTime</div>
                            <div>采血当日开始给药时间： @context.StartDateTime</div>
                            <div>采血当日输注完时间： @context.EndDateTime</div>
                            <div>采血前最后一次给药时间： @context.LastDateTime</div>
                            <div>采血管： @context.Collectingvessel</div>
                        </Row>
                        @if (@context.medicalPKSamplings is not null)
                        {

                            foreach (var item in @context.medicalPKSamplings)
                            {
                               // var c = $"C{@item.SamplingNumber}采样";

                                <GroupBox Title="@item.SamplingNumber">
                                    <div class=" row col-12">
                                        <div class="col-2">浓度:@item.C1Concentration  @item.C1ConcentrationUnit.ToString()/ml</div>
                                        <div class="col-3">标准化血药浓度:@item.C1ConcentrationStandard</div>
                                        <div class="col-2">浓度方法:@item.C1ConcentrationMethod??@item.Other</div>
                                        <div class="col-5">备注:@item.C1Remarks</div>
                                    </div>
                                </GroupBox>
                            }
                        }
                        <div class="d-flex align-content-center justify-content-end"> <p class="text-muted font-weight-light text-monospace"><small>表单记录时间：@context.Createtime</small></p></div>
                    </CardBody>
                </Card>
            </BodyTemplate>
        </ListView>
    }

</div>


@code {




    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string param { get; set; }

    [Inject]
    private MessageService messageService { set; get; }

    private Message MessageElement { set; get; }

    [Inject]
    private SwalService? SwalService { get; set; }

    [Inject]
    public DialogService? dialogService { set; get; }

    public Dictionary<string, object?> keyValuePairs { set; get; }


    public MedicalPKSampling medicalPKSampling { set; get; }

    private List<MedicalPKSampling> pKSamplings { set; get; } = new();

    private List<MedicalPKSamplingsample> pKSampling_Samples { set; get; } = new List<MedicalPKSamplingsample>();

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Name { get; set; }



    private string Querywhere { set; get; }


    protected override async Task OnParametersSetAsync()
    {
        if (Text is not null or "")
        {
            // Task.Run(()=> { ); });
            var obj = new MedicalPKSampling();
            obj.Medicalrecordnumber = Text;
            obj.Username = Name;
            await OnShowDlg(obj);
        }
        return;
    }


    protected async override Task OnInitializedAsync()
    {
        await OnSearch();
        return;//base.OnInitializedAsync();
    }


    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (!firstRender) return;

    //    pKSamplings = await GetMedicalPKSamplings();
    //    //if (param != default)
    //    //{
    //    //    var id = Convert.ToInt32(param);
    //    //    //medicalPK = await GetMedicalPK(id);
    //    //    // pKSamplings = medicalPK.MedicalPKSamplings;
    //    //    pKSamplings = await GetMedicalPKSamplings();
    //    //    //keyValuePairs = DisplayAttributeExtend.GetAttributeExtends<MedicalPK>(medicalPK);
    //    //    StateHasChanged();
    //    //}
    //    return;//base.OnAfterRenderAsync(firstRender);
    //}

    private Task<QueryData<MedicalPKSampling>> OnQueryAsync(QueryPageOptions options)
    {
        if (pKSamplings is not null)
        {
            var items = pKSamplings.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems);
            return Task.FromResult(new QueryData<MedicalPKSampling>()
            {
                Items = items,
                TotalCount = pKSamplings.Count()
            });
        }
        return null;
    }


    private async Task OnSearch()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var Adminname = authenticationStateTask.Result.User.Identity.Name;
            if (Querywhere is not null)
            {
                pKSamplings = await context.MPK_Samplings.AsNoTracking().Where(w => w.Adminname == Adminname).Where(w => w.Medicalrecordnumber.Contains(Querywhere) || w.Username.Contains(Querywhere)).Include(i=>i.medicalPKSamplings).ToListAsync();

            }
            else
            {
                pKSamplings = await context.MPK_Samplings.AsNoTracking().Where(w => w.Adminname == Adminname).Include(i => i.medicalPKSamplings).Take(100).ToListAsync();
            }
        }
        StateHasChanged();
        return; //Task.CompletedTask;
    }

    //private async Task<List<MedicalPKSampling>> GetMedicalPKSamplings(int id)
    //{
    //    using (var context = contextFactory.CreateDbContext())
    //    {

    //        return await context.MPK_Samplings.AsNoTracking().Where(w => w.ID == id).ToListAsync();
    //    }
    //}

    /// <summary>
    /// 获取所有的采用信息数据；方便后期使用分组 绑定给药方案
    /// </summary>
    /// <returns></returns>
    //private async Task<List<MedicalPKSampling>> GetMedicalPKSamplings()
    //{
    //    using (var context = contextFactory.CreateDbContext())
    //    {
    //        var adminnamne = authenticationStateTask.Result.User.Identity.Name;
    //        return await context.MPK_Samplings.AsNoTracking().Include(i => i.medicalPK).Where(w => w.Createtime > DateTime.Now.AddDays(-30)).Where(w => w.Adminname == adminnamne).ToListAsync();
    //    }
    //}

    private async Task Ondel(MedicalPKSampling myobject)
    {
        var op = new SwalOption()
        {
            Title = "警告",
            Content = "数据删除不可再恢复，是否确定删除？",
            IsConfirm = true,
            Category = SwalCategory.Warning
        };
        var re = await SwalService.ShowModal(op);
        if (re)
        {

            using (var context = contextFactory.CreateDbContext())
            {
                context.MPK_Samplings.Remove(myobject);
                var ok = context.SaveChanges();
                if (ok > 0)
                {
                    pKSamplings.Remove(myobject);
                    StateHasChanged();
                }
                else
                {
                    ShowColorMessage(Color.Warning, "数据删除失败", MessageElement);

                }
            }
        }
        return;
    }

    //private async Task<MedicalPK> GetMedicalPK(int id)
    //{
    //    using (var context = contextFactory.CreateDbContext())
    //    {
    //        return await context.MPKs.Include(i => i.MedicalPKSamplings).ThenInclude(t => t.medicalPKSamplings).FirstAsync(w => w.MedicalPKID == id);
    //    }
    //}

    private async Task OnShowDlg(MedicalPKSampling pKSampling)
    {
        var retdlg = await dialogService.ShowModal<MedicalPKSamplingsampleDlg>(new ResultDialogOption()
        {
            BodyContext = new MedicalPKSampling(),
            Title = "新增信息采集单",
            Size = Size.Large,
            ComponentParamters = new Dictionary<string, object>
            {
                [nameof(MedicalPKSamplingsampleDlg.OnEventCallback)]= EventCallback.Factory.Create<MedicalPKSampling>(this, v => medicalPKSampling = v)
                                    }

        });

        if (retdlg == DialogResult.Yes)
        {
            using (var context = contextFactory.CreateDbContext())
            {

                medicalPKSampling.Adminname = authenticationStateTask.Result.User.Identity.Name;
                medicalPKSampling.Createtime = DateTime.Now;
                // if (medicalPKSampling.medicalPKSamplings is null) medicalPK.MedicalPKSamplings = new();

                // medicalPK.MedicalPKSamplings.Add(medicalPKSampling);

                context.MPK_Samplings.Add(medicalPKSampling);

                //context.medicalPKSamplings.Add(medicalPKSampling);
                context.SaveChanges();
                pKSamplings.Add(medicalPKSampling);
            }

        }
        StateHasChanged();
        return;
    }

    public void ShowColorMessage(Color color, string content, Message message)
    {
         message.SetPlacement(Placement.Top);
        messageService?.Show(new MessageOption()
            {

                Content = content,
                Icon = "fa fa-info-circle",
                Color = color,
                ShowBar = true,
                ShowDismiss = true,
            }, message);
    }

}
