
@page "/MedicalPKDetailsPage"
@page "/MedicalPKDetailsPage/{Text}/{Name?}"
@using Microsoft.Data.SqlClient

@inject IDbContextFactory<MedicalDbContext> contextFactory

    @*采样信息*@

<div class=" divtop d-flex  align-items-center">

    <div class="  w-100 ">

        <Card>
            <CardHeader>
                查询条件
            </CardHeader>
            <CardBody>
                <Row RowType="RowType.Normal" ItemsPerRow="ItemsPerRow.Two">

                    <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>

                    <button class="createbut fa fa-plus" @onclick="@(()=>OnShowDlg(null))"></button>
                </Row>
            </CardBody>
        </Card>

    </div>
</div>



<div class="w-100">
    <Card>
        <CardHeader>
            查询结果
        </CardHeader>
        <CardBody>
            <Table TItem="MedicalPKSampling" ShowLoading="true" IsPagination="true" IsStriped="true" IsBordered="true"
                   ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
                   OnQueryAsync="@OnQueryAsync" IsAutoRefresh="true"  FixedExtendButtonsColumn="true"
                   ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
                <RowButtonTemplate>
                    <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-info" Text=" 详情 "  OnClick="@(()=>OnDetails(context))" ></Button>
                    <Button Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-edit" Text=" 修改 "  OnClick="@(()=>OnEdit(context))" ></Button>
                    <PopConfirmButton Size="Size.ExtraSmall" ConfirmButtonColor="Color.Danger" Icon="fa fa-trash" OnConfirm="@(()=>OnDelete(context))" Placement="Placement.Top" Color="Color.Danger" ConfirmIcon="fa fa-exclamation-triangle text-danger"  Text="删除" Content="确定删除数据吗？" />
                </RowButtonTemplate>
            </Table>
        </CardBody>
    </Card>

</div>
<Message @ref="MessageElement" />


<Drawer Width="500px" Placement="Placement.Left" @bind-IsOpen="@IsBackdropOpen" IsBackdrop="true">
    @if(medicalPKSampling is not null)
    {
          <p class="mt-3 text-center">
             <Card Class="w-100">
                 <CardHeader>
                     <div >
                          <p class="h4 " style="text-align:left">名称：@medicalPKSampling.Username</p>
                          <p class="h4 " style="text-align:left" >编号：@medicalPKSampling.Medicalrecordnumber</p>
                     </div>
                   
                 </CardHeader>
                <CardBody>
                    <Row ItemsPerRow="ItemsPerRow.One">
                        <dl class="row " style="text-align:left">
                          <dt class="col-sm-5">采集日期：</dt>
                          <dd class="col-sm-7">@medicalPKSampling.CollectDateTime</dd>

                           <dt class="col-sm-5">采血当日开始给药时间：</dt>
                          <dd class="col-sm-7">@medicalPKSampling.StartDateTime</dd>

                           <dt class="col-sm-5">采血当日输注完时间：</dt>
                          <dd class="col-sm-7">@medicalPKSampling.EndDateTime</dd>

                           <dt class="col-sm-5">采血前最后一次给药时间：</dt>
                          <dd class="col-sm-7">@medicalPKSampling.LastDateTime</dd>

                           <dt class="col-sm-5">采血管：</dt>
                          <dd class="col-sm-7">@medicalPKSampling.Collectingvessel</dd>
                        </dl>
                    </Row>
                    @if (@medicalPKSampling.medicalPKSamplings is not null)
                    {

                        foreach (var item in @medicalPKSampling.medicalPKSamplings)
                        {
                            // var c = $"C{@item.SamplingNumber}采样";

                            <GroupBox Title="@($"{item.SamplingNumber}:{item.Samplingname}:{item.Number}")">
                                <Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Normal">
                                    <p style="text-align:left">浓度:@(item.C1Concentration is not null?$"{item.C1Concentration}{item.C1ConcentrationUnit}/ml":"")</p>
                                    <p style="text-align:left">标准化血药浓度:@item.C1ConcentrationStandard</p>
                                    <p style="text-align:left">浓度方法:@(item.C1ConcentrationMethod is not null?item.C1ConcentrationMethod:item.Other)</p>
                                </Row>
                                  <Row ItemsPerRow="ItemsPerRow.One">
                                        <p style="text-align:left">备注:@item.C1Remarks</p>
                                  </Row>
                            </GroupBox>
                        }
                    }
                    <div class="d-flex align-content-center justify-content-end"> <p class="text-muted font-weight-light text-monospace"><small>表单记录时间：@medicalPKSampling.Createtime</small></p></div>
                </CardBody>
             </Card>
          </p>
    }

</Drawer>

@*<div class="marginlr w-100 mt-2">

    @if (pKSamplings is not null)
    {
        <ListView TItem="MedicalPKSampling"  OnQueryAsync="@OnQueryAsync" Pageable="true">
            <HeaderTemplate> 采样信息列表</HeaderTemplate>
            <BodyTemplate>
                
            </BodyTemplate>
        </ListView>
    }

</div>*@


@code {




    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string param { get; set; }

    [Inject]
    private MessageService messageService { set; get; }

    private Message MessageElement { set; get; }

    [Inject]
    private SwalService? SwalService { get; set; }

    [Inject]
    public DialogService? dialogService { set; get; }

    public Dictionary<string, object?> keyValuePairs { set; get; }


    public MedicalPKSampling medicalPKSampling { set; get; }

    private List<MedicalPKSampling> pKSamplings { set; get; } = new();

    private List<MedicalPKSamplingsample> pKSampling_Samples { set; get; } = new List<MedicalPKSamplingsample>();

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Name { get; set; }


    private bool IsBackdropOpen{ get; set; }
    private string Querywhere { set; get; }


    protected override async Task OnParametersSetAsync()
    {
        if (Text is not null or "")
        {
            // Task.Run(()=> { ); });
            var obj = new MedicalPKSampling();
            obj.Medicalrecordnumber = Text;
            obj.Username = Name;
            obj.medicalPKSamplings = new(); 
            await OnShowDlg(obj);
        }
        return;
    }


    protected async override Task OnInitializedAsync()
    {
        await OnSearch();
        return;//base.OnInitializedAsync();
    }

    private Task<QueryData<MedicalPKSampling>> OnQueryAsync(QueryPageOptions options)
    {
        if (pKSamplings is not null)
        {
            var items = pKSamplings.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems);
            return Task.FromResult(new QueryData<MedicalPKSampling>()
            {
                Items = items,
                TotalCount = pKSamplings.Count()
            });
        }
        return null;
    }


    private async Task OnSearch()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var Adminname = authenticationStateTask.Result.User.Identity.Name;
            if (Querywhere is not null)
            {
                pKSamplings = await context.MPK_Samplings.Where(w => w.Adminname == Adminname).Where(w => w.Medicalrecordnumber.Contains(Querywhere) || w.Username.Contains(Querywhere)).OrderByDescending(o=>o.Createtime).Include(i=>i.medicalPKSamplings).ToListAsync();

            }
            else
            {
                pKSamplings = await context.MPK_Samplings.Where(w => w.Adminname == Adminname).OrderByDescending(o=>o.Createtime).Include(i => i.medicalPKSamplings).Take(100).ToListAsync();
            }
        }
        StateHasChanged();
        return; //Task.CompletedTask;
    }


    private async Task OnEdit(MedicalPKSampling myobject)
    {

        MedicalPKSampling pKSampling = new MedicalPKSampling();
        var retdlg = await dialogService.ShowModal<MedicalPKSamplingsampleDlg>(new ResultDialogOption()
            {
                BodyContext = myobject,
                Title = "编辑修改",
                Size = Size.ExtraLarge,
                ComponentParamters = new Dictionary<string, object>
                {
                    [nameof(MedicalPKSamplingsampleDlg.OnEventCallback)] = EventCallback.Factory.Create<MedicalPKSampling>(this, v => pKSampling = v)
                }
            });

        if (retdlg == DialogResult.Yes)
        {
            try
            {
                using (var context = contextFactory.CreateDbContext())
                {
                    context.Update(pKSampling);
                    context.SaveChanges();
                    ShowColorMessage(Color.Success, "数据编辑修改成功", MessageElement);

                    Log.Information<MedicalPKSampling>(pKSampling.ToString()+"-----成功修改------",pKSampling);
                }
            }
            catch(SqlException sqlex)
            {
                ShowColorMessage(Color.Warning, "数据编辑修改失败，请联系管理员", MessageElement);
                Log.Warning(sqlex.Message);
            }

        }
        StateHasChanged();
    }

    private async Task OnDelete(MedicalPKSampling myobject)
    {
        using (var context = contextFactory.CreateDbContext())
        {
            context.MPK_Samplings.Remove(myobject);
            var ok = context.SaveChanges();
            if (ok > 0)
            {
                pKSamplings.Remove(myobject);
                ShowColorMessage(Color.Info, "注意：数据已经成功删除", MessageElement);
                StateHasChanged();
            }
            else
            {
                ShowColorMessage(Color.Warning, "数据删除失败", MessageElement);

            }
        }

    }
    private async Task OnDetails(MedicalPKSampling myobject)
    {

        medicalPKSampling = myobject;
        StateHasChanged();
        IsBackdropOpen = IsBackdropOpen? false : true;
    }

    //private async Task<MedicalPK> GetMedicalPK(int id)
    //{
    //    using (var context = contextFactory.CreateDbContext())
    //    {
    //        return await context.MPKs.Include(i => i.MedicalPKSamplings).ThenInclude(t => t.medicalPKSamplings).FirstAsync(w => w.MedicalPKID == id);
    //    }
    //}

    private async Task OnShowDlg(MedicalPKSampling pKSampling)
    {
        MedicalPKSampling medicalPK = new MedicalPKSampling();
        var retdlg = await dialogService.ShowModal<MedicalPKSamplingsampleDlg>(new ResultDialogOption()
        {
            BodyContext = pKSampling,
            Title = "新增信息采集单",
            Size = Size.Large,
            ComponentParamters = new Dictionary<string, object>
            {
                [nameof(MedicalPKSamplingsampleDlg.OnEventCallback)] = EventCallback.Factory.Create<MedicalPKSampling>(this, v => medicalPK = v)
            }

        });

        if (retdlg == DialogResult.Yes)
        {
            using (var context = contextFactory.CreateDbContext())
            {
                context.MPK_Samplings.Add(medicalPK);

                //context.medicalPKSamplings.Add(medicalPKSampling);
                context.SaveChanges();
                pKSamplings.Add(medicalPK);

                  ShowColorMessage(Color.Success, "数据添加成功", MessageElement);
            }

        }
        StateHasChanged();
        return;
    }

    public void ShowColorMessage(Color color, string content, Message message)
    {
         message.SetPlacement(Placement.Top);
        messageService?.Show(new MessageOption()
            {

                Content = content,
                Icon = "fa fa-info-circle",
                Color = color,
                ShowBar = true,
                ShowDismiss = true,
            }, message);
    }

}
