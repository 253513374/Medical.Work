
@page "/MedicalPKDetailsPage"
@page "/MedicalPKDetailsPage/{param?}"

@inject IDbContextFactory<MedicalDbContext> contextFactory


<div class="  w-100 d-flex align-items-center">
    <div class=" marginlr w-100 row " style="min-height:600px;">


        <div class="col-6">
            <div class="shadow-lg divradius " style="margin-top:144px; padding:5px;">
                @if (keyValuePairs is not null)
                {
                    foreach (var item in keyValuePairs)
                    {
                        <div class="row">
                            <div class="w-50 text-right pr-4"> <h5>@item.Key</h5></div>
                            <div class="w-50 text-left pl-1"> <p>@item.Value</p></div>
                        </div>
                    }
                }
                <div>

                </div>
            </div>

        </div>

        <div class="col-6 shadow-lg divradius" style="margin-top: 144px;">
            <div class=" d-flex align-items-center">
                <div class="row ">
                    @for (int i = 0; i < 10; i++)
                    {
                        <div class="p-2">
                            <Button Color="Color.Primary">
                                <i class="fa fa-tv"></i>
                                <span>主要按钮</span>
                                <Badge Color="Color.Danger">1</Badge>
                            </Button>
                        </div>
                    }
                </div>

            </div>
        </div>

    </div>

</div>
<div class="marginlr w-100">

</div>

@code {

    private MedicalPK medicalPK { set; get; }

    private List<MedicalPKSampling> medicalPKDatetimeSamplings { set; get; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string param { get; set; }

    public Dictionary<string, object?> keyValuePairs { set; get; }

    protected override async Task OnParametersSetAsync()
    {
        if (param != default)
        {
            var id = Convert.ToInt32(param);
            medicalPK = await GetMedicalPK(id);
            medicalPKDatetimeSamplings = await GetMedicalPKSamplings();
            keyValuePairs = DisplayAttributeExtend.GetAttributeExtends<MedicalPK>(medicalPK);

        }
    }

    private async Task<List<MedicalPKSampling>> GetMedicalPKSamplings(int id)
    {
        using (var context = contextFactory.CreateDbContext())
        {

            return await context.medicalPKSamplings.AsNoTracking().Where(w => w.MedicalPKID == id).ToListAsync();
        }
    }

    /// <summary>
    /// 获取所有的采用信息数据；方便后期使用分组 绑定给药方案
    /// </summary>
    /// <returns></returns>
    private async Task<List<MedicalPKSampling>> GetMedicalPKSamplings()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var adminnamne = authenticationStateTask.Result.User.Identity.Name;
            return await context.medicalPKSamplings.AsNoTracking().Where(w => w.CreateTime > DateTime.Now.AddDays(-30)).Where(w => w.AdminName == adminnamne).ToListAsync();
        }
    }

    private async Task<MedicalPK> GetMedicalPK(int id)
    {
        using (var context = contextFactory.CreateDbContext())
        {
            return await context.medicalPKs.AsNoTracking().FirstAsync(w => w.MedicalPKID == id);
        }
    }
    //public override async Task SetParametersAsync(ParameterView parameters)
    //{
    //    if (parameters.TryGetValue<string>(nameof(Param), out var value))
    //    {
    //        if (value is null)
    //        {
    //           // message = "The value of 'Param' is null.";
    //        }
    //        else
    //        {
    //            Param= value;
    //        }
    //    }

    //    await base.SetParametersAsync(parameters);
    //}

}
