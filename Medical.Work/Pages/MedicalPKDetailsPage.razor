

@page "/MedicalPKDetailsPage/{param?}"

@inject IDbContextFactory<MedicalDbContext> contextFactory


<div class="w-100" style="margin-top:144px; padding:5px;"></div>

<div class="  w-100 d-flex align-items-center justify-content-center">
    <div class=" w-100 marginlr row d-flex justify-content-between " style="min-height:700px; ">

        <div class=" col-4 shadow-lg divradius p-4">
            @if (keyValuePairs is not null)
            {
                foreach (var item in keyValuePairs)
                {
                    <div class="row d-flex justify-content-center">
                        <div class="col-8 text-right pr-4"> <h5>@item.Key</h5></div>
                        <div class="col-4 text-left pl-1"> <p>@item.Value</p></div>
                    </div>
                }
            }
        </div>

        <div class="col-6 shadow-lg divradius p-4">
            <div class="d-flex justify-content-between">
                <p class="h3"> 绑定信息采集单 </p>
                <Button class="oi oi-plus" Size="Size.Large" @onclick="@(s => OnBing())">新增</Button>
            </div>
            <div class=" d-flex align-items-center">
                <div class="row ">

                    @if (medicalPKDatetimeSamplings is not null)
                    {
                        var items = medicalPKDatetimeSamplings.GroupBy(g => g.medicalPK.DrugsNmae).Select(s => new { name = s.Key, mcount = s.ToList() }).ToList();
                        foreach (var item in items)
                        {
                            <div class="p-2">
                                <Button Color="Color.Primary">
                                    <i class="fa fa-file-text"></i>
                                    <span>@item.name</span>
                                    <Badge Color="Color.Danger">@item.mcount.Count</Badge>
                                </Button>
                            </div>
                        }
                    }
                </div>

            </div>
        </div>

    </div>

</div>

<div class="marginlr w-100 mt-2">

    @*@if (medicalPK is not null)
        {
            if (medicalPK.MedicalPKSamplings is not null)
            {
                var items = medicalPK.MedicalPKSamplings;*@
    @if (pKSamplings is not null)
    {
        <ListView TItem="MedicalPKSampling" GroupName="@(p=>p.SpecimenType)" OnQueryAsync="@OnQueryAsync">
            <HeaderTemplate> 采样信息列表</HeaderTemplate>
            <BodyTemplate>
                <Card Class="w-100">

                    <CardBody>
                        <Row ItemsPerRow="ItemsPerRow.One">
                            <div>采集日期： @context.CollectDateTime</div>
                            <div>采血当日开始给药时间： @context.StartDateTime</div>
                            <div>采血当日输注完时间： @context.EndDateTime</div>
                            <div>采血前最后一次给药时间： @context.LastDateTime</div>
                            <div>采血管： @context.Collectingvessel</div>
                        </Row>
                        @if (@context.medicalPKSamplings is not null)
                        {

                            foreach (var item in @context.medicalPKSamplings)
                            {
                                var c = $"C{@item.SamplingNumber}采样";

                                <GroupBox Title="@c">
                                    <div class=" row col-12">
                                        <div class="col-2">浓度:@item.C1Concentration  @item.C1ConcentrationUnit.ToString()/ml</div>
                                        <div class="col-3">标准化血药浓度:@item.C1ConcentrationStandard</div>
                                        <div class="col-2">浓度方法:@item.C1ConcentrationMethod??@item.Other</div>
                                        <div class="col-5">备注:@item.C1Remarks</div>
                                    </div>
                                </GroupBox>
                            }
                        }
                        <div class="d-flex align-content-center justify-content-end"> <p class="text-muted font-weight-light text-monospace"><small>表单记录时间：@context.CreateTime</small></p></div>
                    </CardBody>
                </Card>
            </BodyTemplate>
        </ListView>
    }

</div>


@code {

    private MedicalPK medicalPK { set; get; }

    private List<MedicalPKSampling> medicalPKDatetimeSamplings { set; get; }

    private List<MedicalPKSampling> pKSamplings { set; get; }

    private List<MedicalPKSampling_sample> pKSampling_Samples { set; get; }


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string param { get; set; }

    [Inject]
    public DialogService? dialogService { set; get; }

    public Dictionary<string, object?> keyValuePairs { set; get; }

    public MedicalPKSampling medicalPKSampling { set; get; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (param != default)
        {
            var id = Convert.ToInt32(param);
            medicalPK = await GetMedicalPK(id);
            pKSamplings = medicalPK.MedicalPKSamplings;
            medicalPKDatetimeSamplings = await GetMedicalPKSamplings();
            keyValuePairs = DisplayAttributeExtend.GetAttributeExtends<MedicalPK>(medicalPK);
            StateHasChanged();
        }
        return;//base.OnAfterRenderAsync(firstRender);
    }

    private Task<QueryData<MedicalPKSampling>> OnQueryAsync(QueryPageOptions options)
    {
        if (pKSamplings is not null)
        {
            var items = pKSamplings.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems);
            return Task.FromResult(new QueryData<MedicalPKSampling>()
            {
                Items = items,
                TotalCount = pKSamplings.Count()
            });
        }
        return null;
    }

    private async Task<List<MedicalPKSampling>> GetMedicalPKSamplings(int id)
    {
        using (var context = contextFactory.CreateDbContext())
        {

            return await context.medicalPKSamplings.AsNoTracking().Where(w => w.MedicalPKID == id).ToListAsync();
        }
    }

    /// <summary>
    /// 获取所有的采用信息数据；方便后期使用分组 绑定给药方案
    /// </summary>
    /// <returns></returns>
    private async Task<List<MedicalPKSampling>> GetMedicalPKSamplings()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var adminnamne = authenticationStateTask.Result.User.Identity.Name;
            return await context.medicalPKSamplings.AsNoTracking().Include(i => i.medicalPK).Where(w => w.CreateTime > DateTime.Now.AddDays(-30)).Where(w => w.AdminName == adminnamne).ToListAsync();
        }
    }

    private async Task<MedicalPK> GetMedicalPK(int id)
    {
        using (var context = contextFactory.CreateDbContext())
        {
            return await context.medicalPKs.Include(i => i.MedicalPKSamplings).ThenInclude(t => t.medicalPKSamplings).FirstAsync(w => w.MedicalPKID == id);
        }
    }

    private async Task OnBing()
    {
        var retdlg = await dialogService.ShowModal<MedicalPKSampling_sample_Dlg>(new ResultDialogOption()
        {
            BodyContext = new MedicalPKSampling(),
            Title = "新增信息采集单",
            Size = Size.Large,
            ComponentParamters = new KeyValuePair<string, object>[]
            {
                new(nameof(MedicalPKSampling_sample_Dlg.OnEventCallback), EventCallback.Factory.Create<MedicalPKSampling>(this, v => medicalPKSampling = v))
                        }

        });

        if (retdlg == DialogResult.Yes)
        {
            using (var context = contextFactory.CreateDbContext())
            {

                medicalPKSampling.AdminName = authenticationStateTask.Result.User.Identity.Name;
                medicalPKSampling.CreateTime = DateTime.Now;
                if (medicalPK.MedicalPKSamplings is null) medicalPK.MedicalPKSamplings = new();

                medicalPK.MedicalPKSamplings.Add(medicalPKSampling);
                context.medicalPKs.Update(medicalPK);
                //context.medicalPKSamplings.Add(medicalPKSampling);
                context.SaveChanges();
            }

        }
        StateHasChanged();
        return;
    }

    //private async Task OnBingDrugdosage()
    //{

    //}

}
