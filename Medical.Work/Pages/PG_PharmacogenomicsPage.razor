

@page "/PG_PharmacogenomicsPage"



<div class="divtop d-flex  align-items-center">

    <div class="  w-100 ">
        <Row RowType="RowType.Normal" ItemsPerRow="ItemsPerRow.Two">

            <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>

            <button class="createbut fa fa-plus " @onclick="@OnShowDlg"></button>
        </Row>
    </div>
</div>

<div>
    <Table TItem="MedicalPG_Pharmacogenomics" ShowLoading="true" Items="@pG_Pharmacogenomics" IsPagination="true" IsStriped="true" IsBordered="true"
           ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
           OnQueryAsync="@OnQueryAsync"  IsAutoRefresh="true"
           ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
        <RowButtonTemplate>
            @* <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="明细" OnClickCallback="@(() => OnRowDetailedClick(context,1))" />*@
            <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="编辑" OnClickCallback="@(() => OnRowEditClick())" />
        </RowButtonTemplate>
    </Table>
</div>
<Message @ref="MessageElement" />



@code {

    [Inject]
    private MessageService messageService { set; get; }

    private Message MessageElement { set; get; }

    [Inject]
    DialogService? Dialogservice { set; get; }

    [Inject]
    IDbContextFactory<MedicalDbContext> contextFactory { set; get; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { set; get; }

    private string Querywhere { set; get; }



    private MedicalPG_Pharmacogenomics pG_Pharmacogenomic { set; get; }
    private List<MedicalPG_Pharmacogenomics> pG_Pharmacogenomics  { set; get; } = new();

    protected override async Task OnParametersSetAsync()
    {

        await OnSearch();
        return; // await base.OnParametersSetAsync();
    }

    private async Task OnSearch()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var adminname = authenticationStateTask.Result.User.Identity.Name;
            if (Querywhere is not null)
            {
                pG_Pharmacogenomics = await context.MPG_Pharmacogenomics.AsNoTracking().Where(w => w.Medicalrecordnumber.Contains(Querywhere) || w.UserName.Contains(Querywhere)).ToListAsync();

            }
            else
            {
                pG_Pharmacogenomics = await context.MPG_Pharmacogenomics.AsNoTracking().Where(w => w.AdminName == adminname).Take(100).ToListAsync();
            }
        }
        StateHasChanged();
        return; //Task.CompletedTask;
    }

    private Task<QueryData<MedicalPG_Pharmacogenomics>> OnQueryAsync(QueryPageOptions options)
    {
        // 内存分页
        var items = pG_Pharmacogenomics.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<MedicalPG_Pharmacogenomics>()
        {
            Items = items,
            TotalCount = pG_Pharmacogenomics.Count
            // IsSearch = true
        });
    }

    private async Task OnShowDlg()
    {
        var result = await Dialogservice.ShowModal<PG_Pharmacogenomics_Dlg>(new ResultDialogOption()
        {
            Title = "新建药物基因组学",
            BodyContext = new MedicalPG_Pharmacogenomics(),
            Size = Size.ExtraSmall,
            ComponentParamters = new KeyValuePair<string, object>[]
              {
                //new(nameof(EditReportCard.TemplateParameter), Certificatetemplate),
                      new(nameof(PG_Pharmacogenomics_Dlg.OnEventCallback), EventCallback.Factory.Create<MedicalPG_Pharmacogenomics>(this, v => pG_Pharmacogenomic = v))
              }
        });

        if (result == DialogResult.Yes)
        {
            using (var context = contextFactory.CreateDbContext())
            {
                if (pG_Pharmacogenomic != null)
                {
                    pG_Pharmacogenomic.CreateTime = DateTime.Now;
                    pG_Pharmacogenomic.AdminName = authenticationStateTask.Result.User.Identity.Name;
                    context.MPG_Pharmacogenomics.Add(pG_Pharmacogenomic);
                    context.SaveChanges();
                    pG_Pharmacogenomics.Add(pG_Pharmacogenomic);
                    ShowColorMessage(Color.Success, "新建药物基因组学成功", MessageElement);
                }
            }

        }
        return;
    }

    private Task OnRowEditClick()
    {
        return Task.CompletedTask;
    }

    public void ShowColorMessage(Color color, string content, Message message)
    {
        message.SetPlacement(Placement.Top);
        messageService?.Show(new MessageOption()
        {
            Host = message,
            Content = content,
            Icon = "fa fa-info-circle",
            Color = color
        });
    }
}