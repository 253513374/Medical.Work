
@page  "/PG_PharmacogenomicsPage"
@page  "/PG_PharmacogenomicsPage/{Text}/{Name?}"



<div class="divtop d-flex  align-items-center">

    <div class="  w-100 ">

        <Card>
            <CardHeader>
                查询条件
            </CardHeader>
            <CardBody>
                <Row RowType="RowType.Normal" ItemsPerRow="ItemsPerRow.Two">

                    <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>

                    <button class="createbut fa fa-plus " @onclick="@(()=>OnShowDlg(null))"></button>
                </Row>
            </CardBody>
        </Card>

    </div>
</div>

<div>

    <Card>
        <CardHeader>
            查询结果
        </CardHeader>
        <CardBody>
            <Table TItem="MedicalPG_Pharmacogenomics" ShowLoading="true" Items="@pG_Pharmacogenomics" IsPagination="true" IsStriped="true" IsBordered="true"
                   ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
                   OnQueryAsync="@OnQueryAsync" IsAutoRefresh="true"
                   ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
                <RowButtonTemplate>
                    @* <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="明细" OnClickCallback="@(() => OnRowDetailedClick(context,1))" />*@
                    <TableCellButton Size="Size.ExtraSmall" Color="Color.Warning" Icon="fa fa-edit" Text="删除" OnClickCallback="@(() => Ondel(context))" />
                </RowButtonTemplate>
            </Table>
        </CardBody>
    </Card>

</div>
<Message @ref="MessageElement" />



@code {

    [Inject]
    private MessageService messageService { set; get; }

    private Message MessageElement { set; get; }

    [Inject]
    DialogService? Dialogservice { set; get; }

    [Inject]
    IDbContextFactory<MedicalDbContext> contextFactory { set; get; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { set; get; }

    private string Querywhere { set; get; }



    private MedicalPG_Pharmacogenomics pG_Pharmacogenomic { set; get; }
    private List<MedicalPG_Pharmacogenomics> pG_Pharmacogenomics { set; get; } = new();



    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Name { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if (Text is not null or "")
        {
            // Task.Run(()=> { ); });
            var obj = new MedicalPG_Pharmacogenomics();
            obj.Medicalrecordnumber = Text;
            obj.Username = Name;
            await OnShowDlg(obj);
        }
        return;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await OnSearch();
        return;// base.OnAfterRenderAsync(firstRender);
    }


    private async Task OnSearch()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var Adminname = authenticationStateTask.Result.User.Identity.Name;
            if (Querywhere is not null)
            {
                pG_Pharmacogenomics = await context.MPG_Pharmacogenomics.AsNoTracking().Where(w => w.Medicalrecordnumber.Contains(Querywhere) || w.Username.Contains(Querywhere)).ToListAsync();

            }
            else
            {
                pG_Pharmacogenomics = await context.MPG_Pharmacogenomics.AsNoTracking().Where(w => w.Adminname == Adminname).Take(100).ToListAsync();
            }
        }
        StateHasChanged();
        return; //Task.CompletedTask;
    }

    private Task<QueryData<MedicalPG_Pharmacogenomics>> OnQueryAsync(QueryPageOptions options)
    {
        // 内存分页
        var items = pG_Pharmacogenomics.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<MedicalPG_Pharmacogenomics>()
        {
            Items = items,
            TotalCount = pG_Pharmacogenomics.Count
            // IsSearch = true
        });
    }

    private async Task OnShowDlg(MedicalPG_Pharmacogenomics obj)
    {
        var result = await Dialogservice.ShowModal<PG_Pharmacogenomics_Dlg>(new ResultDialogOption()
        {
            Title = "新建药物基因组学",
            BodyContext = obj,
            Size = Size.ExtraSmall,
                ComponentParamters = new Dictionary<string, object>
                {
               
                      [nameof(PG_Pharmacogenomics_Dlg.OnEventCallback)]= EventCallback.Factory.Create<MedicalPG_Pharmacogenomics>(this, v => pG_Pharmacogenomic = v)
                 }
            //ComponentParamters = new KeyValuePair<string, object>[]
            //  {
               
            //          new(nameof(PG_Pharmacogenomics_Dlg.OnEventCallback), EventCallback.Factory.Create<MedicalPG_Pharmacogenomics>(this, v => pG_Pharmacogenomic = v))
            //      }
        });

        if (result == DialogResult.Yes)
        {
            using (var context = contextFactory.CreateDbContext())
            {
                if (pG_Pharmacogenomic != null)
                {
                    pG_Pharmacogenomic.Createtime = DateTime.Now;
                    pG_Pharmacogenomic.Adminname = authenticationStateTask.Result.User.Identity.Name;
                    context.MPG_Pharmacogenomics.Add(pG_Pharmacogenomic);
                    context.SaveChanges();
                    pG_Pharmacogenomics.Add(pG_Pharmacogenomic);
                    ShowColorMessage(Color.Success, "新建药物基因组学成功", MessageElement);
                }
            }

        }
        return;
    }

    private Task OnRowEditClick()
    {
        return Task.CompletedTask;
    }

    public void ShowColorMessage(Color color, string content, Message message)
    {
         message.SetPlacement(Placement.Top);
            messageService?.Show(new MessageOption()
            {
             
                Content = content,
                Icon = "fa fa-info-circle",
                Color = color,
                ShowBar = true,
                ShowDismiss = true,
            }, message);
    }

    [Inject]
    private SwalService? SwalService { get; set; }

    private async Task Ondel(MedicalPG_Pharmacogenomics myobject)
    {
        var op = new SwalOption()
        {
            Title = "警告",
            Content = "数据删除不可再恢复，是否确定删除？",
            IsConfirm = true,
            Category = SwalCategory.Warning
        };
        var re = await SwalService.ShowModal(op);
        if (re)
        {

            using (var context = contextFactory.CreateDbContext())
            {
                context.MPG_Pharmacogenomics.Remove(myobject);
                var ok = context.SaveChanges();
                if (ok > 0)
                {
                    pG_Pharmacogenomics.Remove(myobject);
                    StateHasChanged();
                }
                else
                {
                    ShowColorMessage(Color.Warning, "数据删除失败", MessageElement);

                }
            }
        }
        return;
    }
}