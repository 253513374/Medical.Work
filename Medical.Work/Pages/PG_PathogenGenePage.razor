



@page "/PG_PathogenGenePage"


@inject IDbContextFactory<MedicalDbContext> contextFactory

<div class="divtop d-flex  align-items-center">

    <div class="  w-100 ">
        <Row RowType="RowType.FormRow" ItemsPerRow="ItemsPerRow.Two">

            <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>

            <button class="createbut fa fa-plus " @onclick="@OnShowDlg"></button>
        </Row>
    </div>
</div>

<div>
    <Table TItem="MedicalPG_PathogenGene" ShowLoading="true" Items="@pG_PathogenGenes" IsPagination="true" IsStriped="true" IsBordered="true"
           ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
           ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
        <RowButtonTemplate>
            @* <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="明细" OnClickCallback="@(() => OnRowDetailedClick(context,1))" />*@
            <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="编辑" OnClickCallback="@(() => OnRowEditClick())" />
        </RowButtonTemplate>
    </Table>
</div>




@code {

        [CascadingParameter]
        private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string Querywhere { set; get; }

    private List<MedicalPG_PathogenGene>  pG_PathogenGenes   { set; get; } = new();


    private Task OnSearch()
    {


        if (Querywhere is null)
        {
            using (var context = contextFactory.CreateDbContext())
            { }
        }
        return Task.CompletedTask;
    }

    private Task OnShowDlg()
    {

        return Task.CompletedTask;
    }

    private Task OnRowEditClick()
    {
        return Task.CompletedTask;
    }


}

@*<h3>MedicalPGPage</h3>*@

