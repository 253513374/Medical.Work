


@inject IDbContextFactory<MedicalDbContext> ContextFactory



<ValidateForm Model="@contacts">

    <Row RowType="RowType.FormRow" ItemsPerRow="ItemsPerRow.One">
        <BootstrapInput @bind-Value="@contacts.Medicalrecordnumber"></BootstrapInput>
    </Row>
    <Row RowType="RowType.FormRow" ItemsPerRow="ItemsPerRow.Two">
        <BootstrapInput @bind-Value="@contacts.UserName"></BootstrapInput>
        <BootstrapInput @bind-Value="@contacts.Contactnumber"></BootstrapInput>
    </Row>
    <Row RowType="RowType.FormRow" ItemsPerRow="ItemsPerRow.Two">
        <BootstrapInput @bind-Value="@contacts.Emai"></BootstrapInput>
    </Row>
    <Row RowType="RowType.FormRow" ItemsPerRow="ItemsPerRow.One">
        <Textarea rows="3" @bind-Value="@contacts.Address" />
    </Row>
</ValidateForm>

    @code {



        [CascadingParameter(Name = "BodyContext")]
        public object? objectContacts { set; get; }

        [Parameter]
        public Contacts  contacts { set; get; }


        [Parameter]
        public EventCallback<Contacts> OnEventCallback { set; get; }





        protected override Task OnInitializedAsync()
        {
            contacts = objectContacts as Contacts;
            return base.OnInitializedAsync();

        }




}
       
