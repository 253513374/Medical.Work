





<ValidateForm Model="@Genes">
    <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.Normal">
         <label>患者信息</label>
         <AutoFill TValue="PatientsTips" Value="patientsTips" Items="DataTips.PatientsTips" IsLikeMatch="true" OnSelectedItemChanged="OnAutoFillSelectedItemChanged" OnGetDisplayText="OnGetDisplayText" class="mb-3" IsSelectAllTextOnFocus="true">
                            <Template>
                                <div class="d-flex">
                                    <div>
                                        <img src="/img/gezi.png" class="bb-avatar" style="max-width:48px;" />
                                    </div>
                                    <div class="ps-2">
                                        <div>@context.Number</div>
                                        <div class="bb-sub">@context.Description</div>
                                    </div>
                                </div>
                            </Template>
            </AutoFill>
        <BootstrapInput @bind-Value="@Genes.PathogenName"></BootstrapInput>
        <BootstrapInput @bind-Value="@Genes.PathogenicGeneName"></BootstrapInput>
        <BootstrapInput @bind-Value="@Genes.PathogenicGeneDetectionResults"></BootstrapInput>
        <BootstrapInput @bind-Value="@Genes.Exegesis"></BootstrapInput>
    </Row>

</ValidateForm>

@code {


    [CascadingParameter(Name = "BodyContext")]
    public object? PathogenGene { set; get; }


    private MedicalPG_PathogenGene Genes { set; get; } = new();



    [Parameter]
    public EventCallback<MedicalPG_PathogenGene> OnEventCallback { set; get; }


    protected override void OnParametersSet()
    {
        if(PathogenGene is not null)
        {
            Genes = PathogenGene as MedicalPG_PathogenGene;
        }

        base.OnParametersSet();
    }
      public PatientsTips patientsTips{ set; get; }  

    private Task OnAutoFillSelectedItemChanged(PatientsTips tips )
    {
        Genes.Medicalrecordnumber = tips.Number;
        Genes.Username = tips.Description;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private string OnGetDisplayText(PatientsTips tips)
    {
        return $"{tips.Number} - {tips.Description}";
    }
}
