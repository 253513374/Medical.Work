

@*<h3>MedicalPKSamplingsampleDlg</h3>*@

<div class="marginlr">
    <ValidateForm Model="@medicalPKSampling">


        <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.Normal">
            <label>患者信息</label>
             <AutoFill TValue="PatientsTips" Value="patientsTips" Items="DataTips.PatientsTips" IsLikeMatch="true" OnSelectedItemChanged="OnAutoFillSelectedItemChanged" OnGetDisplayText="OnGetDisplayText" class="mb-3" IsSelectAllTextOnFocus="true">
                            <Template>
                                <div class="d-flex">
                                    <div>
                                        <img src="/img/gezi.png" class="bb-avatar" style="max-width:48px;" />
                                    </div>
                                    <div class="ps-2">
                                        <div>@context.Number</div>
                                        <div class="bb-sub">@context.Description</div>
                                    </div>
                                </div>
                            </Template>
            </AutoFill>
            <Select @bind-Value="@medicalPKSampling.SpecimenType"></Select>
          
        </Row>

        <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Normal">
            <DateTimePicker ViewModel=DatePickerViewModel.DateTime @bind-Value="@medicalPKSampling.CollectDateTime"></DateTimePicker>
            <DateTimePicker ViewModel=DatePickerViewModel.DateTime  @bind-Value="@medicalPKSampling.LastDateTime"></DateTimePicker>
            <DateTimePicker ViewModel=DatePickerViewModel.DateTime @bind-Value="@medicalPKSampling.StartDateTime"></DateTimePicker>
            <DateTimePicker ViewModel=DatePickerViewModel.DateTime @bind-Value="@medicalPKSampling.EndDateTime"></DateTimePicker>

        </Row>
        <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.Normal">
           
            <Select @bind-Value="@medicalPKSampling.Collectingvessel"></Select>
        </Row>
    </ValidateForm>

    <Divider  ></Divider>
    <GroupBox Title="C1-C6">
        <ValidateForm Model="medicalPKSampling_Sample">
            <Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Normal">

                <Select @bind-Value="@medicalPKSampling_Sample.SamplingNumber">
                    <Options>
                        <SelectOption Text="C1" Value="C1" Active="true"></SelectOption>
                        <SelectOption Text="C2" Value="C2"></SelectOption>
                        <SelectOption Text="C3" Value="C3"></SelectOption>
                        <SelectOption Text="C4" Value="C4"></SelectOption>
                        <SelectOption Text="C5" Value="C5"></SelectOption>
                        <SelectOption Text="C6" Value="C6"></SelectOption>
                        <SelectOption Text="C7" Value="C7"></SelectOption>
                    </Options>
                </Select>

                <BootstrapInput @bind-Value="@medicalPKSampling_Sample.Number"></BootstrapInput>
                <BootstrapInput @bind-Value="@medicalPKSampling_Sample.Samplingname"></BootstrapInput>

            </Row>
            <Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Normal">
                <DateTimePicker ViewModel=DatePickerViewModel.DateTime @bind-Value="@medicalPKSampling_Sample.C1bloodcollectiontime"></DateTimePicker>
                <BootstrapInput @bind-Value="@medicalPKSampling_Sample.C1Concentration"></BootstrapInput>
                <Select @bind-Value="@medicalPKSampling_Sample.C1ConcentrationUnit"></Select>
                <BootstrapInput @bind-Value="@medicalPKSampling_Sample.C1ConcentrationStandard"></BootstrapInput>
                <BootstrapInput @bind-Value="@medicalPKSampling_Sample.C1ConcentrationStandardUnit"></BootstrapInput>

                <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Normal">
                    <Select @bind-Value="@medicalPKSampling_Sample.C1ConcentrationMethod"></Select>
                    <BootstrapInput @bind-Value="@medicalPKSampling_Sample.Other"></BootstrapInput>
                </Row>
               

            </Row>
          
            <Row ItemsPerRow="ItemsPerRow.Four" RowType="RowType.Normal">
                <Row ColSpan="3">
                    <Textarea rows="3" @bind-Value="@medicalPKSampling_Sample.C1Remarks"></Textarea>
                </Row>
                <div class="d-flex align-items-center justify-content-center w-100 h-100">
                    <Button class="fa fa-plus" Size="Size.Large" @onclick="@OnBingDrugdosage"> 添加 </Button>
                </div>

            </Row>
        </ValidateForm>
        <div style="min-height:150px;">
            <Table TItem="MedicalPKSamplingsample" ShowLoading="true" Items="@pKSampling_Samples" IsPagination="true" IsStriped="true" IsBordered="true" IsMultipleSelect="true"
                   ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
                   ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
                <RowButtonTemplate>
                    <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-trash" Text="删除" 
                                     @onclick="@(s=>OnDelPKSampling_sample(@context))"/>
                    @*<TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="编辑" OnClickCallback="@(() => OnRowEditClick(context,1))" />*@
                </RowButtonTemplate>
            </Table>
        </div>
    </GroupBox>
  
</div>

@code {

    [CascadingParameter(Name = "BodyContext")]
    public object? objectPKSamplings { set; get; }



    public MedicalPKSamplingsample medicalPKSampling_Sample { set; get; } = new();

    public List<MedicalPKSamplingsample> pKSampling_Samples { set; get; } = new();

    [Parameter]
    public MedicalPKSampling medicalPKSampling { set; get; }

    [Parameter]
    public EventCallback<MedicalPKSampling> OnEventCallback { set; get; }

    protected override async Task OnParametersSetAsync()
    {
        if(objectPKSamplings is not null)
        {
            medicalPKSampling = objectPKSamplings as MedicalPKSampling;
            pKSampling_Samples = medicalPKSampling.medicalPKSamplings;
        }
        else
        {
            medicalPKSampling = new MedicalPKSampling();
            //medicalPKSampling.medicalPKSamplings = new List<MedicalPKSamplingsample>();
        }
    }

    private  Task OnBingDrugdosage()
    {

        pKSampling_Samples.Add(new MedicalPKSamplingsample() {
            SamplingNumber =medicalPKSampling_Sample.SamplingNumber,
            Number = medicalPKSampling_Sample.Number,
            Samplingname = medicalPKSampling_Sample.Samplingname,

            C1bloodcollectiontime = medicalPKSampling_Sample.C1bloodcollectiontime,
            C1Concentration = medicalPKSampling_Sample.C1Concentration,
            C1ConcentrationUnit = medicalPKSampling_Sample.C1ConcentrationUnit,
            C1ConcentrationStandard = medicalPKSampling_Sample.C1ConcentrationStandard,
            C1ConcentrationMethod = medicalPKSampling_Sample.C1ConcentrationMethod,

            Other = medicalPKSampling_Sample.Other,
            C1Remarks = medicalPKSampling_Sample.C1Remarks, });
        StateHasChanged();
        return Task.CompletedTask;
    }
    private  Task OnDelPKSampling_sample(MedicalPKSamplingsample _Sample)
    {
        pKSampling_Samples.Remove(_Sample);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public PatientsTips patientsTips{ set; get; }  

    private Task OnAutoFillSelectedItemChanged(PatientsTips tips )
    {
        medicalPKSampling.Medicalrecordnumber = tips.Number;
        medicalPKSampling.Username = tips.Description;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private string OnGetDisplayText(PatientsTips tips)
    {
        return $"{tips.Number} - {tips.Description}";
    }
}
