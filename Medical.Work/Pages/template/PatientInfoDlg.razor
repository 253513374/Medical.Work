


<ValidateForm Model="@patientInfo">
    <Row ItemsPerRow="ItemsPerRow.Four" RowType="RowType.FormRow">

        <BootstrapInput @bind-Value="@patientInfo.Medicalrecordnumber" />
        <BootstrapInput @bind-Value="@patientInfo.Department" />
        <BootstrapInput @bind-Value="@patientInfo.Name" />
        <Select @bind-Value="@patientInfo.Gender" />
    </Row>

    <Row>
        <Row ItemsPerRow="ItemsPerRow.Six">

        </Row>
        <DateTimePicker TValue="DateTime?" Value="@patientInfo.AGE" DisplayText="出生日期" ShowLabel="true" Placement="Placement.Auto" />
        <p>333</p>


        <Row RowType="RowType.FormRow"  ItemsPerRow="ItemsPerRow.Three">


            <BootstrapInput @bind-Value="@patientInfo.BW" />
            <div class="row">
                <div class="form-group">
                    <Radio  ShowLabel="true" DisplayText="称重"> </Radio>
                    <Radio  ShowLabel="true" DisplayText="估算"> </Radio>
                </div>
            </div>


        </Row>
        <BootstrapInput @bind-Value="@patientInfo.BSA" />
        <BootstrapInput @bind-Value="@patientInfo.HEI" />
        <BootstrapInput @bind-Value="@patientInfo.SOFA" />

        <BootstrapInput @bind-Value="@patientInfo.APACHEⅡ" />
        <BootstrapInput @bind-Value="@patientInfo.Ancestralhome" />
        <BootstrapInput @bind-Value="@patientInfo.GCS" />
        <BootstrapInput @bind-Value="@patientInfo.Nationality" />

        <Row RowType="RowType.FormRow" ColSpan="4">
            <Textarea rows="4" @bind-Value="@patientInfo.Medicalhistorysummary" />
        </Row>
    </Row>
    <div>

    </div>
    <div>

    </div>
    <div>

    </div>
</ValidateForm>


@code {


    [CascadingParameter(Name = "BodyContext")]
    public object? objects { set; get; }

    [Parameter]
    public PatientInfo patientInfo { set; get; }


    [Parameter]
    public EventCallback<PatientInfo> OnEventCallback { set; get; }


    protected override Task OnInitializedAsync()
    {
        patientInfo = objects as PatientInfo;
        return base.OnInitializedAsync();
    }

    private Task DateTimeValueChanged(DateTime? d)
    {
       // BindValue = d;
      
        return Task.CompletedTask;
    }
}
