

@inject IDbContextFactory<MedicalDbContext> ContextFactory

<style>
    .form-inline .form-group .control-label {
        margin-right: 10px;
        width: 260px;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
        display: block;
        text-align: right;
    }
</style>

<div>
    <ValidateForm Model="@Laboratoryexamination">
          <AutoFill TValue="PatientsTips" Value="patientsTips" Items="DataTips.PatientsTips" IsLikeMatch="true" OnSelectedItemChanged="OnAutoFillSelectedItemChanged" OnGetDisplayText="OnGetDisplayText" class="mb-3" IsSelectAllTextOnFocus="true">
                <Template>
                    <div class="d-flex">
                        <div>
                            <img src="/img/gezi.png" class="bb-avatar" style="max-width:42px;" />
                        </div>
                        <div class="ps-2">
                            <div style="font-size:10px;" >@context.Number</div>
                            <div style="font-size:10px;" class="bb-sub">@context.Description</div>
                        </div>
                    </div>
                </Template>
         </AutoFill>
       @* <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.Normal">
            <BootstrapInput @bind-Value="@Laboratoryexamination.Medicalrecordnumber"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.Username"></BootstrapInput>
        </Row>*@
        <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Normal">
            <Select @bind-Value="@Laboratoryexamination.Assaysituation" Items="EnumItems.AssaysituationEnum"></Select>
            <DateTimePicker @bind-Value="@Laboratoryexamination.Assaytime"></DateTimePicker>

        </Row>
        <Divider></Divider>
        <Row ItemsPerRow="ItemsPerRow.Two" RowType="RowType.Normal">

            <BootstrapInput @bind-Value="@Laboratoryexamination.BodyTemperature"></BootstrapInput>
            <Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Normal">
                <BootstrapInput @bind-Value="@Laboratoryexamination.Scr"></BootstrapInput>
                <Select @bind-Value="@Laboratoryexamination.Screnum" Items="EnumItems.ScrEnum"></Select>
                <BootstrapInput @bind-Value="@Laboratoryexamination.Screnumother"></BootstrapInput>
            </Row>

            <BootstrapInput @bind-Value="@Laboratoryexamination.BUN"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.CLcr"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.eGFR"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.ALT"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.AST"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.ALP"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.TBLL"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.TBLL_Z"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.TBLL_J"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.ALB"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.INR"></BootstrapInput>
            <Select @bind-Value="@Laboratoryexamination.Child_pugh">
                <Options>
                    <SelectOption Text="A" Value="A"></SelectOption>
                    <SelectOption Text="B" Value="B"></SelectOption>
                    <SelectOption Text="C" Value="C"></SelectOption>
                </Options>

            </Select>
            <BootstrapInput @bind-Value="@Laboratoryexamination.PLT"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.WBC"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.NE"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.GGT"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.Hemoglobin"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.CRP"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.PCT"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.IL6"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.ESR"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.Uricine"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.Nitrite"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.bacterial"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.Yeast"></BootstrapInput>
            <BootstrapInput @bind-Value="@Laboratoryexamination.CSF"></BootstrapInput>

        </Row>
        <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.Normal">
            <Textarea rows="3" @bind-Value="@Laboratoryexamination.Remark"></Textarea>
        </Row>

        @*<EditorForm Model="@Laboratoryexamination" ItemsPerRow="3" AutoGenerateAllItem="true" >
                <FieldItems>
                    <EditorItem @bind-Field="@Laboratoryexamination.Count" ComponentType="typeof(Select<Int32>)" Data="DummyItems" />
                    <EditorItem @bind-Field="@Laboratoryexamination.Hobby"  />
                </FieldItems>
                <Buttons>
                    <Button ButtonType="ButtonType.Submit" Icon="fa fa-save" Text="提交" />
                </Buttons>
            </EditorForm>*@
    </ValidateForm>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public EventCallback<LaboratoryExamination> OnEventCallback { set; get; }

    public PatientsTips patientsTips{ set; get; }  
    private LaboratoryExamination Laboratoryexamination { set; get; } = new();

    [CascadingParameter(Name = "BodyContext")]
    public object? objectLaboratoryExamination { set; get; }

    protected override Task OnParametersSetAsync()
    {
        if (objectLaboratoryExamination is not null)
        {
            Laboratoryexamination = objectLaboratoryExamination as LaboratoryExamination;
        }
        return base.OnParametersSetAsync();
    }

    private Task OnAutoFillSelectedItemChanged(PatientsTips tips )
    {
        Laboratoryexamination.Medicalrecordnumber = tips.Number;
        Laboratoryexamination.Username = tips.Description;
        StateHasChanged();
        return Task.CompletedTask;
    }
      private string OnGetDisplayText(PatientsTips tips)
    {
        return $"{tips.Number} - {tips.Description}";
    }
   
}
