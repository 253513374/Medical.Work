

@page "/PD_MicrobiologicalPage"


<div class="divtop d-flex  align-items-center">

    <div class="  w-100 ">

        <Card>
            <CardHeader>
                查询条件
            </CardHeader>
            <CardBody>
                <Row RowType="RowType.Normal" ItemsPerRow="ItemsPerRow.Two">

                    <Search IgnoreCase="true" IsLikeMatch="true" @bind-Value="@Querywhere" placeholder="请输入关键信息..." OnSearch="@(s=>OnSearch())"></Search>

                    <button class="createbut fa fa-plus " @onclick="@OnShowDlg"></button>
                </Row></CardBody></Card>
                
    </div>
</div>

<div class="w-100">
    <Card>
        <CardHeader>
            查询结果
        </CardHeader>
        <CardBody>
            <Table TItem="MedicalPD_Microbiological" ShowLoading="true" Items="@pD_Microbiologicals" IsPagination="true" IsStriped="true" IsBordered="true"
                   ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
                   OnQueryAsync="@OnQueryAsync" IsAutoRefresh="true"
                   ShowExtendButtons="true" ShowColumnList="true" AutoGenerateColumns="true">
                <RowButtonTemplate>
                    @* <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-edit" Text="明细" OnClickCallback="@(() => OnRowDetailedClick(context,1))" />*@
                    <TableCellButton Size="Size.ExtraSmall" Color="Color.Warning" Icon="fa fa-edit" Text="删除" OnClickCallback="@(() => Ondel(context))" />
                </RowButtonTemplate>
            </Table>
        </CardBody>
    </Card>
           
</div>

<Message @ref="MessageElement" />


@code {
    [Inject]
    private MessageService messageService { set; get; }

    private Message MessageElement { set; get; }

    [Inject]
    DialogService? Dialogservice { set; get; }

    [Inject]
    IDbContextFactory<MedicalDbContext> contextFactory { set; get; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { set; get; }

    private string Querywhere { set; get; }


    private MedicalPD_Microbiological pD_Microbiological { set; get; } = new();

    private List<MedicalPD_Microbiological> pD_Microbiologicals { set; get; } = new();



    protected override async Task OnParametersSetAsync()
    {

        await OnSearch();
        return; // await base.OnParametersSetAsync();
    }

    private async Task OnSearch()
    {
        using (var context = contextFactory.CreateDbContext())
        {
            var adminname = authenticationStateTask.Result.User.Identity.Name;
            if (Querywhere is not null)
            {
                pD_Microbiologicals = await context.MPD_Microbiologicals.AsNoTracking().Where(w => w.Medicalrecordnumber.Contains(Querywhere) || w.UserName.Contains(Querywhere)).ToListAsync();

            }
            else
            {
                pD_Microbiologicals = await context.MPD_Microbiologicals.AsNoTracking().Where(w => w.AdminName == adminname).Take(100).ToListAsync();
            }
        }
        StateHasChanged();
        return; //Task.CompletedTask;
    }

    private Task<QueryData<MedicalPD_Microbiological>> OnQueryAsync(QueryPageOptions options)
    {
        // 内存分页
        var items = pD_Microbiologicals.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<MedicalPD_Microbiological>()
        {
            Items = items,
            TotalCount = pD_Microbiologicals.Count
            // IsSearch = true
        });
    }

    private async Task OnShowDlg()
    {
        var result = await Dialogservice.ShowModal<PD_Microbiological_Dlg>(new ResultDialogOption()
        {
            Title = "新建临床微生物学检查",
            BodyContext = new MedicalPD_Microbiological(),
            Size = Size.ExtraSmall,
            ComponentParamters = new KeyValuePair<string, object>[]
             {
                //new(nameof(EditReportCard.TemplateParameter), Certificatetemplate),
                      new(nameof(PD_Microbiological_Dlg.OnEventCallback), EventCallback.Factory.Create<MedicalPD_Microbiological>(this, v => pD_Microbiological = v))
             }
        });

        if (result == DialogResult.Yes)
        {
            using (var context = contextFactory.CreateDbContext())
            {
                if (pD_Microbiological != null)
                {
                    pD_Microbiological.CreateTime = DateTime.Now;
                    pD_Microbiological.AdminName = authenticationStateTask.Result.User.Identity.Name;
                    context.MPD_Microbiologicals.Add(pD_Microbiological);
                    context.SaveChanges();
                    pD_Microbiologicals.Add(pD_Microbiological);
                    ShowColorMessage(Color.Success, "新建临床微生物学检查", MessageElement);
                }
            }
            // MessageTagservice.ShowColorMessage(Color.Danger, "医患信息添加成功", MessageElement);
        }
        return;
    }
    public void ShowColorMessage(Color color, string content, Message message)
    {
        message.SetPlacement(Placement.Top);
        messageService?.Show(new MessageOption()
        {
            Host = message,
            Content = content,
            Icon = "fa fa-info-circle",
            Color = color
        });
    }
    private Task OnRowEditClick()
    {
        return Task.CompletedTask;
    }
    [Inject]
    private SwalService? SwalService { get; set; }

    private async Task Ondel(MedicalPD_Microbiological myobject)
    {
        var op = new SwalOption()
        {
            Title = "警告",
            Content = "数据删除不可再恢复，是否确定删除？",
            IsConfirm = true,
            Category = SwalCategory.Warning
        };
        var re = await SwalService.ShowModal(op);
        if (re)
        {

            using (var context = contextFactory.CreateDbContext())
            {
                context.MPD_Microbiologicals.Remove(myobject);
                var ok = context.SaveChanges();
                if (ok > 0)
                {
                    pD_Microbiologicals.Remove(myobject);
                    StateHasChanged();
                }
                else
                {
                    ShowColorMessage(Color.Warning, "数据删除失败", MessageElement);

                }
            }
        }
        return;
    }

}
