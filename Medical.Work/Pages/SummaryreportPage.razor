

@page "/SummaryreportPage"
@using System.Diagnostics.CodeAnalysis

@inject IDbContextFactory<MedicalDbContext> Contextfactory
@inject UserManager<IdentityUser> Usermanager

<div >
    <div class="row">
        <div class="col-7 col-sm-7 col-lg-7 col-xl-7">
            <ValidateForm Model="@Sreport">
                <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.Normal">
                   <label>患者信息</label>
                   <AutoFill TValue="PatientsTips" Value="patientsTips" Items="DataTips.PatientsTips" IsLikeMatch="true" OnSelectedItemChanged="OnAutoFillSelectedItemChanged" OnGetDisplayText="OnGetDisplayText" class="mb-3" IsSelectAllTextOnFocus="true">
                                    <Template>
                                        <div class="d-flex">
                                            <div>
                                                <img src="/img/gezi.png" class="bb-avatar" style="max-width:48px;" />
                                            </div>
                                            <div class="ps-2">
                                                <div>@context.Number</div>
                                                <div class="bb-sub">@context.Description</div>
                                            </div>
                                        </div>
                                    </Template>
                    </AutoFill>
                
                    <BootstrapInput @bind-Value="@Sreport.Summaryreportclass"></BootstrapInput>
                    <DateTimePicker @bind-Value="@Sreport.Notesdate" placeholder="请输入 ..."></DateTimePicker>
                 </Row>
                <Row ItemsPerRow="ItemsPerRow.One" RowType="RowType.Normal">

                    <Textarea placeholder="请输入 ..." rows="5" @bind-Value="@Sreport.Treatmentplan"></Textarea>

                    <Textarea placeholder="请输入 ..." rows="5" @bind-Value="@Sreport.Clinicalsymptoms"></Textarea>
                    @*<BootstrapInput @bind-Value="@Sreport.Treatmentplan" placeholder="请输入病历号"></BootstrapInput>
            <BootstrapInput @bind-Value="" placeholder="请输入病历号"></BootstrapInput>*@
                </Row>
            </ValidateForm>
            <div class="d-flex justify-content-end">
                <label style="color: red;font-size: 18px;margin-right: 25px;">@Errorinfo</label>
                <Button @onclick="OnValueChanged">提交保存</Button>
            </div>
        </div>
        <div class="col-5 col-sm-5 col-lg-5 col-xl-5">

        </div>
    </div>
    <Message @ref="message" ></Message>
</div>
    @code {
        private Summaryreport Sreport { set; get; } = new();


        [CascadingParameter]
        private Task<AuthenticationState> authenticationStateTask { get; set; }

        [NotNull]
        private Message message { set; get; }

        [Inject]
        private MessageTag Messagetagservice { set; get; }

        [Inject]
        private MessageService? messageService { set; get; }

        [Inject]
        public DialogService? Dialogservice { set; get; }


        private string Errorinfo { set; get; }

        private void  OnValueChanged()
        {
            using (var context = Contextfactory.CreateDbContext())
            {
                var s = context.Summaryreports.Where(W => W.Medicalrecordnumber == Sreport.Medicalrecordnumber).FirstOrDefault();

                if (s == null)
                {
                    context.Summaryreports.Add(Sreport);
                    context.SaveChanges();
                    ShowMessage(Color.Success, "医学监护流程添加成功");
                }else
                {
                    Errorinfo = "请检查病历号是否重复输入";
                    ShowMessage(Color.Danger, "医学监护流程添加失败");
                }

            }

            return;
        }
     public PatientsTips patientsTips{ set; get; }  

    private Task OnAutoFillSelectedItemChanged(PatientsTips tips )
    {
        Sreport.Medicalrecordnumber = tips.Number;
        Sreport.Username = tips.Description;
        StateHasChanged();
        return Task.CompletedTask;
    }
    private string OnGetDisplayText(PatientsTips tips)
    {
        return $"{tips.Number} - {tips.Description}";
    }
        private void ShowMessage( Color color,string content)
        {
            //MessageElement.SetPlacement(Placement.Top);
            //Messageservice?.Show(new MessageOption()
            //{
            //    Host = MessageElement,
            //    Content = content,
            //    Icon = "fa fa-info-circle",
            //    Color = Color.Success
            //});
              message.SetPlacement(Placement.Top);
            messageService?.Show(new MessageOption()
            {
             
                Content = content,
                Icon = "fa fa-info-circle",
                Color = color,
                ShowBar = true,
                ShowDismiss = true,
            }, message);
        }
    }
