@using Microsoft.Extensions.Caching.Memory


@*
    DialogBingPersonalFile
*@

@inject ISnackbar Snackbar
    <MudStack Row="false" Class="mt-5" >

        <MudStack Row="true" AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                <MudText Align="Align.Left"  Typo="Typo.h4">@Tile</MudText>
                <MudSpacer></MudSpacer>
                                    
            <MudAutocomplete  Margin="Margin.Dense" T="PatientInfo" Label="*绑定个人信息" Dense="true" Variant="Variant.Filled"
                            SearchFunc="@OnSearchPatientInfo"  SelectOnClick="true"  ToStringFunc="@(e=> e==null?null : $"{e.Username}")" 
                            Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.PersonSearch" AdornmentColor="Color.Primary"
                            ResetValueOnEmptyText="true"   ValueChanged = "@OnSearchValueChanged" 
                            Clearable="true">
                <ItemTemplate Context="e">        
                    <MudStack Row="true">
                        <MudIconButton Icon="@Icons.Filled.PersonOutline"></MudIconButton>
                        <MudStack Row="false" Spacing="0">
                            <MudText Typo="Typo.button" ><b> @( $"{e.Username}({e.Medicalrecordnumber})")</b></MudText>
                            <MudText Typo="Typo.caption" >@( $"住院时间：{e.Admissiontime} —— {e.Dischargetime}")</MudText>
         
                        </MudStack>
                    </MudStack>
                </ItemTemplate>
                <ItemSelectedTemplate Context="e">  
                      <MudStack Row="true">
                        <MudIconButton Icon="@Icons.Filled.PersonOutline"></MudIconButton>
                        <MudStack Row="false" Spacing="0">
                            <MudText Typo="Typo.button"><b> @( $"{e.Username}({e.Medicalrecordnumber})")</b></MudText>
                            <MudText Typo="Typo.caption">@( $"住院时间：{e.Admissiontime} —— {e.Dischargetime}")</MudText>
         
                        </MudStack>
                    </MudStack>
                </ItemSelectedTemplate>

            </MudAutocomplete >
        </MudStack>
        <MudDivider></MudDivider>

        @if(BingPatientInfo  is  null)
        {
            <MudSkeleton Animation="Animation.Wave" Width="50%"  />
            <MudSkeleton Animation="Animation.Wave" Width="100%" />
            <MudSkeleton Animation="Animation.Wave" Width="80%"  />
           
                            
        }
        else
        {
            <MudPaper Class="d-flex justify-space-around flex-grow-1 gap-4 my-3" Elevation="10">
                    <MudPaper  Elevation="0"   >
                        <MudStack Row="true" Class="my-3" >
                            <MudText  ><b>姓名</b></MudText>
                            <MudText>@BingPatientInfo.Username</MudText>
                        </MudStack>
                        <MudStack Row="true" Class="my-3" >
                            <MudText><b>科室</b></MudText>
                            <MudText>@BingPatientInfo.Department</MudText>
                        </MudStack>
                    </MudPaper>
                    <MudPaper  Elevation="0"   >
                            <MudStack Row="true" Class="my-3" >
                            <MudText><b>性别</b></MudText>
                            <MudText>@BingPatientInfo.Gender</MudText>
                        </MudStack>
                            <MudStack Row="true"  Class="my-3" >
                            <MudText><b>入院时间</b></MudText>
                            <MudText>@BingPatientInfo.Admissiontime</MudText>
                        </MudStack>
                    </MudPaper>
                    <MudPaper  Elevation="0"  >
                            <MudStack Row="true" Class="my-3" >
                            <MudText><b>年龄</b></MudText>
                            @if(BingPatientInfo.AGE is not null && BingPatientInfo.AGE>0)
                            {
                                    <MudText>@($"{BingPatientInfo.AGE}")</MudText>
                            }
                            @if(BingPatientInfo.MonthAGE is not null &&BingPatientInfo.MonthAGE>0)
                            {
                                    <MudText>@($"{BingPatientInfo.MonthAGE}") （月）</MudText>
                            }
                            @if(BingPatientInfo.DayAGE is not null &&BingPatientInfo.DayAGE>0)
                            {
                                    <MudText>@($"{BingPatientInfo.DayAGE}")（日）</MudText>
                            }
                            @*<MudText>@(BingPatientInfo.AGE??BingPatientInfo.MonthAGE?? BingPatientInfo.DayAGE)</MudText>*@
                        </MudStack>
                        <MudStack Row="true" Class="my-3" >
                            <MudText><b>出院时间</b></MudText>
                            <MudText>@BingPatientInfo.Dischargetime</MudText>
                        </MudStack>
                    </MudPaper>
                </MudPaper>
        }       


</MudStack>



@code {

    /// <summary>
    /// 对话框实列化对象，级联对象
    /// </summary>
    [CascadingParameter]
    protected MudDialogInstance MudDialog { get; set; }



    /// <summary>
    /// 授权相关状态信息
    /// </summary>
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    protected IDbContextFactory<MedicalDbContext> ContextFactory{ set; get; }


    [Inject]
    protected ILogger<DialogBingPersonalFile> Logger{ set; get; }

    [Inject] 
    protected AutocompleteService CacheService { set; get; }



    /// <summary>
    /// 标识编辑进入  还是添加进入
    /// </summary>
    [Parameter]
    public EventCallback<PatientInfo> BingPatientInfoChanged { set; get; }

    /// <summary>
    /// 标识编辑进入  还是添加进入
    /// </summary>
    [Parameter]
    public string? Tile { set; get; }


    /// <summary>
    /// 当前方案绑定的个人基本信息
    /// 表示添加的方案属于哪个患者
    /// </summary>
    [Parameter]
    public PatientInfo? BingPatientInfo{ set; get; }


    public List<PatientInfo> PatientInfos;




    protected override async Task OnParametersSetAsync()
    {
        PatientInfos  = await CacheService.GetCachePatientInfoToListAsync();
    }
    /// <summary>
    /// 编辑数据
    /// </summary>
    /// <param name="editcontext"></param>
    /// <returns></returns>
    private  Task Edit(EditContext editcontext)
    {
        return Task.CompletedTask;
    }

    /// <summary>
    /// 添加数据
    /// </summary>
    /// <param name="editcontext"></param>
    /// <returns></returns>
    private  Task Create(EditContext editcontext)
    {
        return Task.CompletedTask;
    }



    /// <summary>
    /// 搜索个人信息
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<PatientInfo>> OnSearchPatientInfo(string value)
    {
        if (string.IsNullOrEmpty(value))
            return PatientInfos;
        return PatientInfos.Where(x =>$"{x.Username}{x.Medicalrecordnumber}{x.AGE}{x.Gender}".Contains(value));
    }


    /// <summary>
    /// 选择的个人信息
    /// </summary>
    /// <param name="patient"></param>
    /// <returns></returns>

    private async Task OnSearchValueChanged(PatientInfo patient)
    {
       BingPatientInfo = patient;
       await   BingPatientInfoChanged.InvokeAsync(patient);
    }

}
