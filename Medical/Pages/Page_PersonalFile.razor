@page "/PersonalFile"
@using Microsoft.EntityFrameworkCore.Metadata.Internal



@attribute [Authorize]
<PageTitle>首页</PageTitle>

<BannerTitle Title="基础档案管理"></BannerTitle>

<MudPaper Elevation="0" Class="mt-5 mb-1">
    <MudFab Size="Size.Medium" Color="Color.Primary" DisableElevation="true" OnClick="@(s=>OnOpenEditForm(""))" Class="mx-3" StartIcon="@Icons.Material.Outlined.AddCard" Label="新建档案"> </MudFab>
  
</MudPaper>


@if(Patients is null){
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudSkeleton Animation="Animation.Wave" Width="40%" />
                <MudSkeleton Animation="Animation.Wave" Width="60%" />
            </CardHeaderContent>
        </MudCardHeader>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="250px" />
        <MudCardContent>
            <MudSkeleton Animation="Animation.Wave" />
        </MudCardContent>
        <MudCardActions>
    
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-2 mb-2" />
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-3 mb-2" />
        </MudCardActions>
    </MudCard>
}
else{

    <MudTable  T="PatientInfo" FixedFooter="true" FixedHeader = "true" Height="600px" Elevation="0" Items="@Patients"  Hover="true" ReadOnly="true"
              Filter="new Func<PatientInfo,bool>(FilterFuncTable)"  Dense="true" >
        <ToolBarContent >
            <MudDateRangePicker   @ref="@rangePicker" @bind-DateRange="@daterange" Label="时间范围"  >
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start "  OnClick="@(()=>rangePicker.Clear())" >清空选择数据</MudButton>
                    <MudButton OnClick="@(()=>rangePicker.Close(false))"> 关闭 </MudButton>
                    <MudButton OnClick="@(()=>PickerOK())" Color="Color.Primary"> 确定</MudButton>
                </PickerActions>
            </MudDateRangePicker>
            <MudSpacer/> <MudSpacer/><MudSpacer/><MudSpacer/>
            <MudTextField  Margin="Margin.Dense" @bind-Value="searchPatientInfo" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh ><b>编号</b></MudTh>
            <MudTh><b>姓名</b></MudTh>
            <MudTh><b>姓别</b></MudTh>
            <MudTh><b>病历属性</b></MudTh>
            <MudTh><b>科室</b></MudTh>
            <MudTh><b>入院时间</b></MudTh>
            <MudTh><b>出院时间</b></MudTh>
            <MudTh><b>操作</b></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="编号">@context.Medicalrecordnumber</MudTd>
            <MudTd DataLabel="姓名">@context.Username</MudTd>
            <MudTd DataLabel="姓别">@context.Gender</MudTd>
            <MudTd DataLabel="病历属性">@context.CollationAttribute</MudTd>
            <MudTd DataLabel="科室">@context.Department</MudTd>
            <MudTd DataLabel="入院时间">@context.Admissiontime</MudTd>
            <MudTd DataLabel="出院时间">@context.Dischargetime</MudTd>
            <MudTd DataLabel="操作">
                <MudTooltip Text="编辑档案">
                    <MudIconButton  OnClick="@(s=>OnEditPatientInfo(context))"  Color="Color.Info" Size="Size.Small" Icon="@Icons.Outlined.ModeEdit" Variant="Variant.Text" >  </MudIconButton>
                </MudTooltip>
                <MudTooltip Text="查看数据">
                        <MudIconButton Class="mx-3" Color="Color.Info"  Size="Size.Small" Icon="@Icons.Filled.DocumentScanner"   OnClick="@(s=>OnOpenDrawer(context))" Variant="Variant.Text" >   </MudIconButton>
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="当前页显示行数:" PageSizeOptions="new int[]{10,20,30,50, 100}" />
        </PagerContent>
    </MudTable>

}
<MudDrawer @bind-Open="@opendrawer" Width="650px" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader Class="mt-3">
        <MudStack Row="true" Class="w-100 justify-content-between align-content-between align-center align-items-center">
            <MudText Typo="Typo.h6">表单详情</MudText>
            <MudFab Color="Color.Error" OnClick="() => OnDeleteData()" IconSize="Size.Small" StartIcon="@Icons.Material.Filled.Delete" />
        </MudStack>
    </MudDrawerHeader>
    <MudDivider Class="my-2" DividerType="DividerType.Inset"></MudDivider>
    <MudDrawerContainer>
        <MudPaper Class="mx-8" Elevation="0">
            @if (patientInfoDictionary is not null)
            {
                <MudStack Spacing="2">
                    @foreach (var o in patientInfoDictionary)
                    {
                        <MudStack Row="true" Class="border-b-1 mud-border-primary border-solid w-100 justify-content-between">
                            <div style="Width:220px">
                                <MudText Class="pointer-events-auto">@o.Key</MudText>
                            </div>
                            <div style="Width: 380px" class="justify-content-start">
                                <MudText Class=" w-100 pointer-events-auto">
                                    @(o.Value is null ? "" : o.Value.ToString())

                                </MudText>
                            </div>
                        </MudStack>
                    }
                </MudStack>
            }
        </MudPaper>
        <MudDivider Class="my-2" DividerType="DividerType.Inset"></MudDivider>
    </MudDrawerContainer>
</MudDrawer>

@code{

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    protected ILogger<Page_PersonalFile> Logger{ set; get; }

    [Inject]
     private DbServerProvider DbServerProvider { set; get; }
    [Inject] 
    protected IDialogService DialogService  { get; set; }

    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private NavigationManager Navigation { set; get; }

    /// <summary>
    /// 默认查询的时间范围(1个月时间)
    ///  DateTime dateTime = DateRangeValue.End.AddDays(1).AddMilliseconds(-1);
    ///  ListCertificates = _DbContext.TableCertificates.Where(w => w.CreateTime >= DateRangeValue.Start && w.CreateTime <= dateTime).ToList();
    /// </summary>
    DateRange daterange = new DateRange(DateTime.Now.Date.AddDays(-(DateTime.Now.Date.Day-1)), DateTime.Now.Date);
    private MudDateRangePicker rangePicker{ set; get; }

    /// <summary>
    /// 表格过滤关键字
    /// </summary>
    private string searchPatientInfo{ set; get; }

    private List<PatientInfo> Patients{ set; get; }
    private bool  opendrawer;

    [Inject] 
    protected AutocompleteService CacheService { set; get; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var name = authenticationStateTask.Result.User.Identity.Name;
            Patients  = (await CacheService.GetCachePatientInfoToListAsync()).Where(w=>w.Adminname==name).ToList();
            if(Patients is null ||  Patients.Count==0)
            {
               Patients =await DbServerProvider.GetListAsync<PatientInfo>();
                await CacheService.SetCachePatientInfokeyAsync(Patients);
            
            }

            StateHasChanged();
        }
        //  return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// 选择时间对话框确认选择
    /// </summary>
    /// <returns></returns>
    private async Task  PickerOK(){

        rangePicker.Close();

        if (Patients is not null) Patients.Clear();
        Patients = await DbServerProvider.GetListAsync<PatientInfo>(daterange);
        StateHasChanged();

        return;
    }

    private async Task<IEnumerable<PatientInfo>> Search2(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Patients;
        return Patients.Where(x => x.Username.Contains(value)|| x.Medicalrecordnumber.Contains(value));
    }

    private  Task OnOpenEditForm(string guid="")
    {
        if (guid is not "")
        {
            Navigation.NavigateTo($"/Page_PersonalFileForm/{guid}");
        }

        if (guid is "")
        {
            Navigation.NavigateTo($"/Page_PersonalFileForm");
        }

        return  Task.CompletedTask;
    }

    private async Task OnEditPatientInfo(PatientInfo patient)
    {

        Navigation.NavigateTo($"/Page_PersonalFileForm/{patient.Guid}");
    }


    /// <summary>
    /// 重新加载数据
    /// </summary>
    /// <returns></returns>
    private async Task Refresh()
    {
        await OnInitializedAsync();
        StateHasChanged();

        Logger.LogInformation("刷新数据成功");
        return;
    }

    /// <summary>
    /// 表格数据帅选过滤
    /// </summary>
    /// <param name="element"></param>
    /// <returns></returns>
    private bool FilterFuncTable(PatientInfo element) => FilterFunc(element, searchPatientInfo);

    private bool FilterFunc(PatientInfo element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
            if($"{element.Medicalrecordnumber} {element.Username} {element.Department} {element.Gender}".Contains(searchString)){
             return true;
        }
        return false;
    }

    void OnOpenDrawer(PatientInfo  patientInfo)
    {

        patientInfoDictionary = DisplayAttributeExtend.GetAttributeExtends<PatientInfo>(patientInfo);
        opendrawer = true;
        StateHasChanged();
      //  opendrawer = true;

        deleteobject = patientInfo;
    //this.anchor = anchor;
    }
    private Dictionary<string, object?> patientInfoDictionary;
    private PatientInfo deleteobject;

    async void OnDeleteData()
    {

        DialogOptions dialogOptions=  new DialogOptions() { MaxWidth = MaxWidth.Small };
        bool? result = await DialogService.ShowMessageBox(
            "警告", 
            "确定是否需要删除数据，输出的数据无法再恢复", 
            yesText: "删除!", cancelText: "取消", options: dialogOptions);
       // state= result==null ? "Cancelled" : "Deleted!";
        if (result is not null)
        {
            int delresult = await  DbServerProvider.DeleteAsync<PatientInfo>(deleteobject);
            if (delresult>0)
            {
                opendrawer = false;
                
                Patients.Remove(deleteobject);
                Snackbar.Add("数据删除成功", Severity.Warning);
                //StateHasChanged();
            }
        }
        StateHasChanged();
    }

}

