
@page "/bolg/{Id}"


@layout EditLayout

@inject NavigationManager NavigationManager


<MudContainer  MaxWidth="MaxWidth.Medium" Style="justify-content:center">
    <MudPaper Elevation="0" Class="pa-5 rounded-lg">
        @if(blogBody is  not null)
        {
            <MudText Class="my-12" Align="Align.Start" Typo="Typo.h4"><b>@blogBody.Title</b></MudText>

            <BlogMeta BlogGuid="@blogBody.SummaryOfCasesGuid" Author="@blogBody.Adminname" Categories="@blogBody.keywordTag" PublicTime="@blogBody.PublishedDate"></BlogMeta>
            @((MarkupString)badyContent)
        }
    </MudPaper>


    <MudPaper Elevation="0" Class="my-16">
         <MudText Class="pb-16" Typo="Typo.h6">推荐文章列表</MudText>
    </MudPaper>
   
    
</MudContainer>




@code {

    [Parameter]
    public string Id{ set; get; }

    private SummaryOfCases blogBody { set; get; }

    private string badyContent{ set; get; }

    [Inject]
    protected ILogger<BlogBody> Logger{ set; get; }

    [Inject]
    private DbServerProvider DbServerProvider { set; get; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            blogBody = await GetBlogBody(Id);
            if (blogBody.BodyContent is not null)
            {
                badyContent = Markdown.ToHtml(blogBody.BodyContent);
            }

            StateHasChanged();
            //await JSRuntime.InvokeAsync<string>("commonJsFunctions.loadEditor", Toolbar);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async Task<SummaryOfCases> GetBlogBody(string guid)
    {
        var blogBody = await DbServerProvider.FindSingleAsync<SummaryOfCases>(x => x.SummaryOfCasesGuid == guid);

        //await DbContextFactory.CreateDbContext().SummaryOfCases.FirstOrDefaultAsync(x => x.SummaryOfCasesGuid == guid);
        return blogBody;
    }
}

