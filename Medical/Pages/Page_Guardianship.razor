@page "/guardianship"
@using Medical.Data.Models.Common


@attribute [Authorize]

 @inject NavigationManager Navigation

 
<PageTitle>日常工作台</PageTitle>

<BannerTitle  Title="日常工作台" TitleCaption="给予患者希望与力量，把简单与平凡演绎成无数个精彩。"></BannerTitle>

<MudStack Row="true" Class="my-3">
        <MudFab  Label="写工作日志" Size="Size.Medium" Color="Color.Primary" DisableElevation="true"   OnClick="@OnEditArticle" Class="mx-3" StartIcon="@Icons.Material.Outlined.FileOpen" > </MudFab>
        <MudSpacer />
      </MudStack>
@if(Summaryreports is null){
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudSkeleton Animation="Animation.Wave" Width="40%" />
                <MudSkeleton Animation="Animation.Wave" Width="60%" />
            </CardHeaderContent>
        </MudCardHeader>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Animation="Animation.Wave" Height="250px" />
        <MudCardContent>
            <MudSkeleton Animation="Animation.Wave" />
        </MudCardContent>
        <MudCardActions>
    
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-2 mb-2" />
            <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="30px" Width="30px" Class="ml-3 mb-2" />
        </MudCardActions>
    </MudCard>
}
else
{
     <MudTable T="SummaryOfCases"  Items="@Summaryreports"  FixedFooter="true"
         FixedHeader = "true" Height="600px" Elevation="0" Hover="true" ReadOnly="true"
         MultiSelection="true" @bind-SelectedItems="selectedItems" 
              Filter="new Func<SummaryOfCases,bool>(FilterFuncTable)"  Dense="true" >
    
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchstring" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>标题</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd >@context.Title</MudTd>
        <MudTd >
           
            <MudToggleIconButton @bind-Toggled="@context.Ispublic"
                     Icon="@Icons.Outlined.PublicOff" Color="@Color.Dark" Title="未公开"
                     ToggledIcon="@Icons.Outlined.Public" ToggledColor="@Color.Success" ToggledTitle="已公开"/> 

            <MudToggleIconButton @bind-Toggled="@context.IsFeatured"
                     Icon="@Icons.Outlined.StarOutline" Color="@Color.Dark" Title="未精选"
                     ToggledIcon="@Icons.Filled.StarRate" ToggledColor="@Color.Success" ToggledTitle="已精选"/> 

  
                     
                <MudIconButton OnClick="@(s=>OnClickLinkBlogBody(context.SummaryOfCasesGuid))"
                            Icon="@Icons.Outlined.Link" Color="@Color.Dark" Title="Link" ></MudIconButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
</MudTable>
}

@code {
    private string searchstring="";

    private List<SummaryOfCases> Summaryreports{ set; get; }

    private HashSet<SummaryOfCases> selectedItems = new HashSet<SummaryOfCases>();

    [Inject]
    protected ILogger<Page_Guardianship> Logger{ set; get; }

    [Inject]
    private DbServerProvider DbServerProvider { set; get; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //var username = authenticationStateTask.Result.User.Identity.Name;
            //
            //QueryFilterManager.Filter<BaseDataInterface>(q => q.Where(x =>x.Adminname==username));
            ////context.Filter<BaseDataInterface>(q => q.Where(x => x.Adminname==username));
            //Summaryreports = await context.SummaryOfCases.AsNoTracking()
            //                                            .OrderByDescending(o => o.CreateTime)
            //                                            .Take(100)
            //                                            .ToListAsync();

            Summaryreports = await DbServerProvider.GetListAsync<SummaryOfCases>();
            // Summaryreports = ssss.ToList();

            StateHasChanged();
        }
        // return Task.FromResult()
    }


    private void OnEditArticle()
    {
        Logger.LogInformation("OnEditArticle");

        Navigation.NavigateTo($"/edit/{SummaryOfCasesOptions.New}");
    }

    /// <summary>
    /// 表格数据帅选过滤
    /// </summary>
    /// <param name="element"></param>
    /// <returns></returns>
    private bool FilterFuncTable(SummaryOfCases element) => FilterFunc(element, searchstring);

    private bool FilterFunc(SummaryOfCases element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if($"{element.Title} {element.Description} {element.keywordTag}".Contains(searchString)){
            return true;
        }
        return false;
    }

    private Task OnClickLinkBlogBody(string? id)
    {

        //Navigation.BaseUri;
        if (id is null)
        {
            return Task.CompletedTask;
        }
        var uri = $"/bolg/{id}";


        Navigation.NavigateTo(uri);

        return Task.CompletedTask;
    }

    
    /// <summary>
    /// 删除数据
    /// </summary>
    /// <param name="guid"></param>
    /// <returns></returns>
    private Task  OnClickEdie(string guid)
    {
        Logger.LogInformation("OnClickEdie");

         var uri = $"/edit/{SummaryOfCasesOptions.Edit}/{guid}";
        Navigation.NavigateTo(uri);

        return Task.CompletedTask;
    }
}
