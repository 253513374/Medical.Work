


@inject ISnackbar Snackbar
@inject EnumServer EServer;

<MudDialog>
     <TitleContent>
    </TitleContent>
    
    <DialogContent>
        <DialogBingPersonalFile BingPatientInfo="@(BingPatientInfo is null ? null: BingPatientInfo)"  Tile="联系人管理" BingPatientInfoChanged="@OnBingPersonalFile" ></DialogBingPersonalFile>
        <EditForm Model="@MedicalValue" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0" >
                <MudCardContent>

                    <MudStack Row="true">
                        <MudTextField    @bind-Value="@MedicalValue.Contactnumber" For="@(() => MedicalValue.Contactnumber)" Label="联系电话" Variant="Variant.Text" />
                        <MudTextField    @bind-Value="@MedicalValue.Email" For="@(() => MedicalValue.Email)" Label="联系邮箱" Variant="Variant.Text" />
                              
                    </MudStack>
                   <MudStack Row="true">
                       <MudTextField  Lines="3"  @bind-Value="@MedicalValue.Address" For="@(() => MedicalValue.Address)" Label="联系地址" Variant="Variant.Text" />
                          
                   </MudStack>
                </MudCardContent>

                 <MudCardActions  Class="my-5">
                    <MudStack Row="true" Justify="Justify.FlexEnd"  Style="width:100%" >
                        <MudButton OnClick="@(s=> MudDialog.Cancel())">取消</MudButton>
                        <MudButton StartIcon="@Icons.Outlined.Save"  ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" >保存</MudButton>
                    </MudStack>
                </MudCardActions>
            </MudCard>
        </EditForm>

    </DialogContent>
</MudDialog>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    /// <summary>
    /// 缓存服务
    /// </summary>
    [Inject]
    protected AutocompleteService AutocompleteService { set; get; }


    [Inject]
    protected IDbContextFactory<MedicalDbContext> ContextFactory{ set; get; }

    [Parameter]
    public Contacts MedicalValue { set; get; } 

    /// <summary>
    /// 当前方案绑定的个人基本信息
    /// 表示添加的方案属于哪个患者
    /// </summary>
    /// [Required(ErrorMessage = "PatientInfo必须填写")]
    private PatientInfo? BingPatientInfo{ set; get; } 
    //private List<PatientInfo> PatientInfos{ set; get; } 



    // public EventCallback<Contacts> OnEventCallback { set; get; } = new();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    /// <summary>
    /// 标识编辑进入  还是添加进入
    /// </summary>
    [Parameter]
    public bool IsEdit{ set; get; }

    protected override async Task OnParametersSetAsync()
    {
        if(MedicalValue is  null)
        {
            MedicalValue = new  Contacts();
        }
        else
        {
            BingPatientInfo = await AutocompleteService.GetCachePatientInfokeyAsync(MedicalValue.Guid);
        }

        // base.OnParametersSet();
    }



    /// <summary>
    /// 表单提交
    /// </summary>
    /// <param name="editcontext"></param>
    private void OnValidSubmit(EditContext editcontext)
    {

        if (BingPatientInfo is null) return;
        if (IsEdit)
        {
            Edit(editcontext);
              Snackbar.Add("数据修改成功",Severity.Success);
        }
        else
        {
            Create(editcontext);
              Snackbar.Add("联系人添加成功",Severity.Success);
        }

      
        StateHasChanged();
        MudDialog.Close(DialogResult.Ok(editcontext.Model));
    }

    private  Task Edit(EditContext editcontext)
    {
        var editModel = (Contacts)editcontext.Model;

        editModel.Guid = BingPatientInfo.Guid;
        editModel.CreateTime = DateTime.Now;
        editModel.Username = BingPatientInfo.Username;


        using var context = ContextFactory.CreateDbContext();
        context.Contacts.Update(editModel);
        context.SaveChanges();

        return Task.CompletedTask;
    }

    private  Task Create(EditContext editcontext)
    {
        var username = authenticationStateTask.Result.User.Identity.Name;
        var  createModel = (Contacts)editcontext.Model;
        createModel.Adminname = username;
        createModel.CreateTime = DateTime.Now;
        createModel.Guid = BingPatientInfo.Guid;
        createModel.Username = BingPatientInfo.Username;
        createModel.Medicalrecordnumber = BingPatientInfo.Medicalrecordnumber;

        using var context = ContextFactory.CreateDbContext();
        context.Contacts.Add(createModel);
        context.SaveChanges();
        return Task.CompletedTask;
    }
    private  Task OnBingPersonalFile(PatientInfo patient)
    {
        BingPatientInfo = patient;
        
        return Task.CompletedTask;
    }

    
    
}
