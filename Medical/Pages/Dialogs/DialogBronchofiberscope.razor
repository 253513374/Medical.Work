
@*<h3>DialogPathology</h3>


*@





@inject ISnackbar Snackbar
@inject EnumServer EServer;

@attribute [Authorize]

<MudDialog>
     <TitleContent>
    </TitleContent>
    
    <DialogContent>
        <DialogBingPersonalFile BingPatientInfo="@(BingPatientInfo is null ? null: BingPatientInfo)"  Tile="纤维支气管镜检查" BingPatientInfoChanged="@OnBingPersonalFile" ></DialogBingPersonalFile>
        <EditForm  Model="@MedicalValue" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0" >
                <MudCardContent>
                    <MudGrid Spacing="2" >
                        <MudItem  lg="6" md="6" xl="6" sm="12"  >
                            <MudStack Row="false" Spacing="3" >
                                <MudTextField  Margin="Margin.Dense"  T="DateTime?" Format="s" InputType="InputType.DateTimeLocal" @bind-Value="@MedicalValue.Photodate" For="@(() => MedicalValue.Photodate)" Label="检查日期" Variant="Variant.Text" />
                                <MudTextField  Margin="Margin.Dense"  T="DateTime?" Format="s" InputType="InputType.DateTimeLocal" @bind-Value="@MedicalValue.Reportdate" For="@(() => MedicalValue.Reportdate)" Label="报告日期" Variant="Variant.Text" />
                                <MudTextField  Margin="Margin.Dense"    @bind-Value="@MedicalValue.Xraylocation" For="@(() => MedicalValue.Xraylocation)" Label="检查部位" Variant="Variant.Text" />
                                <MudTextField  Margin="Margin.Dense"  Lines="3"  @bind-Value="@MedicalValue.Xrayinspection" For="@(() => MedicalValue.Xrayinspection)" Label="检查结果" Variant="Variant.Text" />
                                 
                                    @* <MudStack Row="true">
                                       <MudAutocomplete Dense="true" Margin="Margin.Dense"  Clearable="true" T="string" Label="放射诊断方式" @bind-Value="@MedicalValue.Xrayimagingenum" For="@(() => MedicalValue.Xrayimagingenum)"
                                                                        SearchFunc="OnAutoSearchXrayimagingenum" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" />
                                    <MudAutocomplete Dense="true" Margin="Margin.Dense"  Clearable="true" T="string" Label="放射诊断部位" @bind-Value="@MedicalValue.XrayImaginglocationenum" For="@(() => MedicalValue.XrayImaginglocationenum)"
                                                                SearchFunc="OnAutoSearchXrayImaginglocationenum" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" />
                                </MudStack>*@
                                
                            </MudStack>
                        </MudItem>
                        <MudItem   lg="6" md="6" xl="6" sm="12"  >
                            <FileUpload @ref="@Upload"  @bind-FilePath="@FilePath" Height="300px"></FileUpload>
                        </MudItem>
                        <MudItem   lg="12" md="12" xl="12" sm="12">
                            @if(MedicalValue is not null && MedicalValue.ImgUrl is not null)
                            {
                                <MudText Align="Align.Start" Typo="Typo.caption"> 现有图像文件：@MedicalValue.ImgUrl.Count </MudText>
                                <MudStack  Row="true" Style="height:120px;overflow: auto;">
                                    @foreach (var econtext in MedicalValue.ImgUrl)
                                    {
                                        <MudMenu PositionAtCursor="true">
                                            <ActivatorContent>
                                                <MudCard>
                                                    @*<div  class=" d-flex justify-center align-content-center" style="height:115px;width:110px;" >
                                                        <Viewerjs  Src="@econtext.ImgUrl" toolbarlite="true" />
                                                    </div>*@
                                                    <MudImage Src="@econtext.ImgUrl" Height="115" />
                                                </MudCard>
                                            </ActivatorContent>
                                            <ChildContent>
                                                <MudMenuItem OnClick="@(s=>OnClickScaling(@econtext.ImgUrl))" >放大</MudMenuItem>
                                                <MudMenuItem  OnClick="@(s=>OnClickHistoricalFilesDelete(@econtext.X_raybronchoscopyPathsID))" >删除</MudMenuItem>
                                            </ChildContent>
                                        </MudMenu>
                                    }
                                </MudStack>
                            }
                               
                           
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                 <MudCardActions  Class="my-5">
                    <MudStack  Row="true" Justify="Justify.FlexEnd"  Style="width:100%" >
                        <MudButton OnClick="@(s=> MudDialog.Cancel())">取消</MudButton>
                        <MudButton StartIcon="@Icons.Outlined.Save"  ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" >保存</MudButton>
                    </MudStack>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>

    <MudOverlay Visible="isVisible" DarkBackground="true" AutoClose="true" >
       <MudImage @onwheel="@MouseWheelEventHandler" Src="@SrcImg" Height="@SrcImgHeight" />
    </MudOverlay>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Inject] 
    protected IDialogService DialogService  { get; set; }

    /// <summary>
    /// 缓存服务
    /// </summary>
    [Inject]
    protected AutocompleteService AutocompleteService { set; get; }


    [Inject]
    protected IDbContextFactory<MedicalDbContext> ContextFactory{ set; get; }

    [Parameter]
    public X_raybronchoscopy MedicalValue { set; get; } 

    private FileUpload Upload { set; get; }
    public List<string> FilePath { set; get; } = new List<string>();


    private bool isVisible{ set; get; } 
    private string SrcImg{ set; get; }
    private int SrcImgHeight { set; get; } //图像默认大小
    //public void ToggleOverlay(bool value)
    //{
    //    isVisible = value;
    //}

    /// <summary>
    /// 鼠标中间滚轮事件
    /// </summary>
    /// <param name="wheelEventArgs"></param>
    /// <returns></returns>
    private Task MouseWheelEventHandler(WheelEventArgs wheelEventArgs)
    {
        if (wheelEventArgs.DeltaY > 0)
        {
            SrcImgHeight += 10;
        }
        else
        {
            SrcImgHeight -= 10;
        }
        return Task.CompletedTask;
    }

    /// <summary>
    /// 在图像列表中，单击图像出现菜单，
    /// 点击【放大】菜单按钮，查看方大图像
    /// </summary>
    /// <param name="imgurl"></param>
    /// <returns></returns>
    private Task OnClickScaling(string imgurl)
    {
        SrcImg = imgurl;
        SrcImgHeight = 500;
        isVisible = true;
        return Task.CompletedTask;
    }

    /// <summary>
    /// 当前方案绑定的个人基本信息
    /// 表示添加的方案属于哪个患者
    /// </summary>
    /// [Required(ErrorMessage = "PatientInfo必须填写")]
    private PatientInfo? BingPatientInfo{ set; get; } 


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    /// <summary>
    /// 标识编辑进入  还是添加进入
    /// </summary>
    [Parameter]
    public bool IsEdit{ set; get; }

    protected override async Task OnParametersSetAsync()
    {
        if(MedicalValue is  null)
        {
            MedicalValue = new  X_raybronchoscopy();
        }
        else
        {
            BingPatientInfo = await AutocompleteService.GetCachePatientInfokeyAsync(MedicalValue.Guid);
        }

        // base.OnParametersSet();
    }



    /// <summary>
    /// 表单验证通过并提交
    /// </summary>
    /// <param name="editcontext"></param>
    private async void OnValidSubmit(EditContext editcontext)
    {

        if (BingPatientInfo is null) return;
        var result=  await Upload.UploadFiles();

        var s = FilePath.Count;
        if(!result)
        {
            Snackbar.Add("图片上传失败，请检查网络",Severity.Error);
            return;
        }
        if (IsEdit)
        {
            Edit(editcontext); 
            Snackbar.Add("数据修改成功",Severity.Success);
        }
        else
        {
            Create(editcontext);
            Snackbar.Add("数据添加成功",Severity.Success);
        }


        StateHasChanged();
        MudDialog.Close(DialogResult.Ok(editcontext.Model));
    }

    /// <summary>
    /// 提交编辑历史数据，使用编辑的数据覆盖现有的数据
    /// </summary>
    /// <param name="editcontext"></param>
    /// <returns></returns>
    private  Task Edit(EditContext editcontext)
    {
        var editModel = (X_raybronchoscopy)editcontext.Model;

        editModel.Guid = BingPatientInfo.Guid;
        editModel.CreateTime = DateTime.Now;
        editModel.Username = BingPatientInfo.Username;
        if( FilePath.Count>0)
        {
            editModel.ImgUrl.AddRange(GetImgUrl());
        }
        using var context = ContextFactory.CreateDbContext();
        context.X_raybronchoscopys.Update(editModel);
        context.SaveChanges();

        return Task.CompletedTask;
    }


    /// <summary>
    /// 提交创建表单数据，新建表单数据到数据库
    /// </summary>
    /// <param name="editcontext"></param>
    /// <returns></returns>
    private  Task Create(EditContext editcontext)
    {
        var username = authenticationStateTask.Result.User.Identity.Name;
        var  createModel = (X_raybronchoscopy)editcontext.Model;
        createModel.Adminname = username;
        createModel.CreateTime = DateTime.Now;
        createModel.Guid = BingPatientInfo.Guid;
        createModel.Username = BingPatientInfo.Username;
        createModel.Medicalrecordnumber = BingPatientInfo.Medicalrecordnumber;

        createModel.ImgUrl = GetImgUrl();

        using var context = ContextFactory.CreateDbContext();
        context.X_raybronchoscopys.Add(createModel);
        context.SaveChanges();
        return Task.CompletedTask;
    }


    /// <summary>
    /// 删除历史图像数据
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    private Task OnClickHistoricalFilesDelete(int id)
    {
        var sss= MedicalValue.ImgUrl.Where(r => r.X_raybronchoscopyPathsID == id).FirstOrDefault();
        using var context = ContextFactory.CreateDbContext();
        context.Entry(sss).State = EntityState.Deleted;

        context.SaveChanges();

        MedicalValue.ImgUrl.RemoveAll(r => r.X_raybronchoscopyPathsID == id);

        StateHasChanged();
        return Task.CompletedTask;
    }

    /// <summary>
    /// 返回图像列表，用于持久化到数据库
    /// </summary>
    /// <returns></returns>
    private List<X_raybronchoscopyPaths> GetImgUrl()
    {
        var list = new List<X_raybronchoscopyPaths>();
        foreach (var item in FilePath)
        {
            var username = authenticationStateTask.Result.User.Identity.Name;
            list.Add(new X_raybronchoscopyPaths()
                {
                    Adminuser =username,
                    ImgUrl = item,
                    CreateTime = DateTime.Now
                });
        }
        return list;
    }



    /// <summary>
    /// 绑定个人信息
    /// </summary>
    /// <param name="patient"></param>
    /// <returns></returns>
    private  Task OnBingPersonalFile(PatientInfo patient)
    {
        BingPatientInfo = patient;
        
        return Task.CompletedTask;
    }

    
    
}
