


@inject ISnackbar Snackbar
@inject EnumServer EServer;


<MudDialog>
     <TitleContent>
    </TitleContent>
    
    <DialogContent>
        <DialogBingPersonalFile BingPatientInfo="@(BingPatientInfo is null ? null: BingPatientInfo)"  Tile="药物基因组学" BingPatientInfoChanged="@OnBingPersonalFile" ></DialogBingPersonalFile>
        <EditForm  Model="@MedicalValue" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0" >
                <MudCardContent>
                    <MudStack Row="false" Spacing="3" >

                        <MudStack Row="true">
                            <MudTextField @bind-Value="@MedicalValue.Rs" For="@(() => MedicalValue.Rs)" Label="Rs号" Variant="Variant.Text" />
                            <MudTextField @bind-Value="@MedicalValue.Genes" For="@(() => MedicalValue.Genes)" Label="基因名称" Variant="Variant.Text" />
                        
                        </MudStack>
                        <MudTextField @bind-Value="@MedicalValue.Genes" For="@(() => MedicalValue.Genes)" Label="基因结果" Variant="Variant.Text" />
                        <MudTextField @bind-Value="@MedicalValue.Metabolictype" For="@(() => MedicalValue.Metabolictype)" Label="基因代谢型" Variant="Variant.Text" />
                        <MudTextField  @bind-Value="@MedicalValue.Metabolictype" For="@(() => MedicalValue.Metabolictype)" Lines="3" Label="意义" Variant="Variant.Text" />
         
                    
                    </MudStack>
                </MudCardContent>

                 <MudCardActions  Class="my-5">
                    <MudStack Row="true" Justify="Justify.FlexEnd"  Style="width:100%" >
                        <MudButton OnClick="@(s=> MudDialog.Cancel())">取消</MudButton>
                        <MudButton StartIcon="@Icons.Outlined.Save"  ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" >保存</MudButton>
                    </MudStack>
                </MudCardActions>
            </MudCard>
        </EditForm>

    </DialogContent>
</MudDialog>
@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    /// <summary>
    /// 缓存服务
    /// </summary>
    [Inject]
    protected AutocompleteService AutocompleteService { set; get; }


    [Inject]
    protected IDbContextFactory<MedicalDbContext> ContextFactory{ set; get; }

    [Parameter]
    public MedicalPG_Pharmacogenomics MedicalValue { set; get; } 

    /// <summary>
    /// 当前方案绑定的个人基本信息
    /// 表示添加的方案属于哪个患者
    /// </summary>
    /// [Required(ErrorMessage = "PatientInfo必须填写")]
    private PatientInfo? BingPatientInfo{ set; get; } 


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    /// <summary>
    /// 标识编辑进入  还是添加进入
    /// </summary>
    [Parameter]
    public bool IsEdit{ set; get; }

    protected override async Task OnParametersSetAsync()
    {
        if(MedicalValue is  null)
        {
            MedicalValue = new  MedicalPG_Pharmacogenomics();
        }
        else
        {
            BingPatientInfo = await AutocompleteService.GetCachePatientInfokeyAsync(MedicalValue.Guid);
        }

        // base.OnParametersSet();
    }



    /// <summary>
    /// 表单提交
    /// </summary>
    /// <param name="editcontext"></param>
    private void OnValidSubmit(EditContext editcontext)
    {
        if (BingPatientInfo is null) return;
        if (IsEdit)
        {
            Edit(editcontext);
        }
        else
        {
            Create(editcontext);
        }

        Snackbar.Add("数据添加成功",Severity.Success);
        StateHasChanged();
        MudDialog.Close(DialogResult.Ok(editcontext.Model));
    }

    private  Task Edit(EditContext editcontext)
    {
        var editModel = (MedicalPG_Pharmacogenomics)editcontext.Model;

        editModel.Guid = BingPatientInfo.Guid;
        editModel.CreateTime = DateTime.Now;
        editModel.Username = BingPatientInfo.Username;


        using var context = ContextFactory.CreateDbContext();
        context.MPG_Pharmacogenomics.Update(editModel);
        context.SaveChanges();

        return Task.CompletedTask;
    }

    private  Task Create(EditContext editcontext)
    {
        var username = authenticationStateTask.Result.User.Identity.Name;
        var  createModel = (MedicalPG_Pharmacogenomics)editcontext.Model;
        createModel.Adminname = username;
        createModel.CreateTime = DateTime.Now;
        createModel.Guid = BingPatientInfo.Guid;
        createModel.Username = BingPatientInfo.Username;
        createModel.Medicalrecordnumber = BingPatientInfo.Medicalrecordnumber;

        using var context = ContextFactory.CreateDbContext();
        context.MPG_Pharmacogenomics.Add(createModel);
        context.SaveChanges();
        return Task.CompletedTask;
    }

    /// <summary>
    /// 药敏检测方法
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<string>> OnAutoSearchDrugsensitivityTest(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.DrugsensitivityEnum;
        return EnumItems.DrugsensitivityEnum.Where(x => x.Contains(value));
    }

    ///// <summary>
    ///// 敏感性
    ///// </summary>
    ///// <param name="value"></param>
    ///// <returns></returns>
    //private async Task<IEnumerable<string>> OnAutoSearchSusceptibility(string value)
    //{
    //    if (string.IsNullOrEmpty(value))
    //        return EnumItems.SusceptibilityEnum;
    //    return EnumItems.SusceptibilityEnum.Where(x => x.Contains(value));
    //}

    ///// <summary>
    ///// MIC
    ///// </summary>
    ///// <param name="value"></param>
    ///// <returns></returns>
    //private async Task<IEnumerable<string>> OnAutoSearchMIC(string value)
    //{
    //    if (string.IsNullOrEmpty(value))
    //        return EnumItems.MICEnum;
    //    return EnumItems.MICEnum.Where(x => x.Contains(value));
    //}
    


    private  Task OnBingPersonalFile(PatientInfo patient)
    {
        BingPatientInfo = patient;
        
        return Task.CompletedTask;
    }

    
    
}
