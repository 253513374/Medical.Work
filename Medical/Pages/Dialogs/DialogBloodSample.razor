





@inject ISnackbar Snackbar
@inject EnumServer EServer
@using Breakpoint= MudBlazor.Breakpoint 
@attribute [Authorize]

<MudDialog>
     <TitleContent>
    </TitleContent>
    <DialogContent>
        <DialogBingPersonalFile BingPatientInfo="@(BingPatientInfo is null?null:BingPatientInfo)"  Tile="采样信息" BingPatientInfoChanged="@OnBingPersonalFile" ></DialogBingPersonalFile>
        <EditForm Model="@MedicalValue" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0" >
                <MudCardContent>
                  
                    <MudGrid Spacing="5" >
                        <MudItem  lg="6" md="6" xl="6" sm="12"  >
                            <MudStack Row="false">
                                <MudAutocomplete Dense="true" Margin="Margin.Dense"  Clearable="true" T="string" Label="标本类型"  @bind-Value="@MedicalValue.SpecimenType" For="@(() => MedicalValue.SpecimenType)"
                                                SearchFunc="@OnAutoSearchSpecimenType" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" />
                                <MudTextField  Margin="Margin.Dense"   T="DateTime?" Format="s" InputType="InputType.DateTimeLocal"  @bind-Value="@MedicalValue.CollectDateTime" For="@(() => MedicalValue.CollectDateTime)" Label="采集时间" Variant="Variant.Text" />
                                <MudTextField  Margin="Margin.Dense"   T="DateTime?" Format="s" InputType="InputType.DateTimeLocal" @bind-Value="@MedicalValue.StartDateTime" For="@(() => MedicalValue.StartDateTime)" Label="采血当日开始给药时间" Variant="Variant.Text" />
                                <MudTextField  Margin="Margin.Dense"   T="DateTime?" Format="s" InputType="InputType.DateTimeLocal" @bind-Value="@MedicalValue.EndDateTime" For="@(() => MedicalValue.EndDateTime)" Label="采血当日输注完时间" Variant="Variant.Text" />
                                <MudTextField  Margin="Margin.Dense"   T="DateTime?" Format="s" InputType="InputType.DateTimeLocal" @bind-Value="@MedicalValue.LastDateTime" For="@(() => MedicalValue.LastDateTime)" Label="采血前最后一次给药时间" Variant="Variant.Text" />


                            </MudStack>

                        </MudItem>
                        <MudItem  lg="6" md="6" xl="6" sm="12"  >
                            <MudFab OnClick="OpenCollectingvesselDialog" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add" Label="添加血样试管" />
                          
                        
                            <MudTable T="MedicalPKSamplingsample" Items="@MedicalValue.medicalPKSamplings" Hover="true" Breakpoint="Breakpoint.Sm"  Style="height:300px"  >
                                <HeaderContent>
                                
                                       <MudTh><b>采样点</b></MudTh>
                                        <MudTh><b>采血试管</b></MudTh>
                                        <MudTh><b>采血时间</b></MudTh>
                                        <MudTh><b>操作</b></MudTh>
                                  
                                </HeaderContent>
                                <RowTemplate Context="e">
                                    <MudTd DataLabel="采样点">@e.SamplingNumber</MudTd>
                                    <MudTd DataLabel="采血试管">@e.Collectingvessel</MudTd>
                                    <MudTd DataLabel="采血时间">@e.C1bloodcollectiontime</MudTd>
                                    <MudTd DataLabel="操作">
                                        <MudIconButton OnClick="@(s=>OnOpenDialogInfo(e))" Size="Size.Small" Icon="@Icons.Filled.Info" ></MudIconButton>
                                
                                    </MudTd>
                              
                                </RowTemplate>
                            </MudTable>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>

                 <MudCardActions  Class="my-5">
                    <MudStack Row="true" Justify="Justify.FlexEnd"  Style="width:100%" >
                        <MudButton OnClick="@(s=> MudDialog.Cancel())">取消</MudButton>
                        <MudButton StartIcon="@Icons.Outlined.Save"  ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" >保存</MudButton>
                    </MudStack>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>




@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    protected AutocompleteService AutocompleteService { set; get; }

    [Inject]
    protected IDbContextFactory<MedicalDbContext> ContextFactory{ set; get; }
    //   [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Inject] 
    protected IDialogService DialogService  { get; set; }

     /// <summary>
    /// 当前方案绑定的个人基本信息
    /// 表示添加的方案属于哪个患者
    /// </summary>
    /// [Required(ErrorMessage = "PatientInfo必须填写")]
    private PatientInfo? BingPatientInfo{ set; get; } 

    /// <summary>
    /// 标识编辑进入  还是添加进入
    /// </summary>
    [Parameter]
    public bool IsEdit{ set; get; }


    [Parameter]
    public MedicalPKSampling MedicalValue { set; get; } 

    /// <summary>
    /// 打开采血管对话框
    /// </summary>
    public bool CollectingvesselVisible{ set; get; }

    //protected List<MedicalPKSamplingsample> Samplingsamples { set; get; } = new List<MedicalPKSamplingsample>();


    protected override async Task OnParametersSetAsync()
    {

        if(MedicalValue is null)
        {
            MedicalValue = new MedicalPKSampling();
            MedicalValue.medicalPKSamplings = new List<MedicalPKSamplingsample>();
        }
        else
        {
            BingPatientInfo = await AutocompleteService.GetCachePatientInfokeyAsync(MedicalValue.Guid);
        }

    }


    /// <summary>
    /// 打开新建采集信息对话框
    /// </summary>
    /// <returns></returns>
    private async Task OpenCollectingvesselDialog()
    {
        DialogOptions dialogOptions = new() { 
              FullWidth = true,
              MaxWidth=MaxWidth.ExtraSmall
         };

        var parameters = new DialogParameters();
        parameters.Add("IsEdit",false);
        // parameters.Add("MedicalValue",Samplingsamples)

        var dialog =DialogService.Show<DialogBloodSample2>("1",parameters,dialogOptions);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var p = result.Data as MedicalPKSamplingsample;

            MedicalValue.medicalPKSamplings.Add(p);

            return ;
        }
        StateHasChanged();

    }


    /// <summary>
    /// 打开数据采血样试管对话框
    /// </summary>
    /// <returns></returns>
    private async Task OnOpenDialogInfo(MedicalPKSamplingsample samplingsample)
    {

        DialogOptions dialogOptions = new() { 
             FullWidth = true,
              MaxWidth=MaxWidth.ExtraSmall
         };

        var parameters = new DialogParameters();
        parameters.Add("MedicalValue",samplingsample);
        parameters.Add("IsEdit",true);
        parameters.Add("IsDelete",true);

        var dialog =DialogService.Show<DialogBloodSample2>("1",parameters,dialogOptions);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //如果返回的bool 类型 ，表示需要删除数据
            if(result.Data is bool)
            {
                var isdelete = (bool)result.Data;

                if(isdelete)
                {
                    MedicalValue.medicalPKSamplings.Remove(samplingsample);
                    Snackbar.Add("数据删除成功",Severity.Success);
                }


            }

            ///如果返回的是数据对象，说明数据需要修改
            if(result.Data is MedicalPKSamplingsample)
            {
                var sampling = (MedicalPKSamplingsample)result.Data;

                var pKSamplingsample = MedicalValue.medicalPKSamplings.Where(x => x.SamplingGuid == sampling.SamplingGuid).FirstOrDefault();
                pKSamplingsample.Collectingvessel = sampling.Collectingvessel;
                pKSamplingsample.Samplingname = sampling.Samplingname;
                pKSamplingsample.Number = sampling.Number;
                pKSamplingsample.SamplingNumber = sampling.SamplingNumber;
                pKSamplingsample.C1bloodcollectiontime = sampling.C1bloodcollectiontime;
                pKSamplingsample.C1Concentration = sampling.C1Concentration;
                pKSamplingsample.C1ConcentrationUnit = sampling.C1ConcentrationUnit;
                pKSamplingsample.C1ConcentrationStandard = sampling.C1ConcentrationStandard;
                pKSamplingsample.C1ConcentrationStandardUnit = sampling.C1ConcentrationStandardUnit;
                pKSamplingsample.C1ConcentrationMethod = sampling.C1ConcentrationMethod;
                pKSamplingsample.C1Remarks = sampling.C1Remarks;
                
                Snackbar.Add("数据修改成功",Severity.Success);
                
            }


            return ;
        }
        StateHasChanged();

    }

    
    /// <summary>
    /// 表单提交
    /// </summary>
    /// <param name="editcontext"></param>
    private void OnValidSubmit(EditContext editcontext)
    {

        if (BingPatientInfo is null) return;
        if (IsEdit)
        {
            Edit(editcontext);
        }
        else
        {
            Create(editcontext);

        }

        Snackbar.Add("数据添加成功",Severity.Success);
        StateHasChanged();
        MudDialog.Close(DialogResult.Ok(editcontext.Model));
    }

    private  Task Edit(EditContext editcontext)
    {
        var editModel = (MedicalPKSampling)editcontext.Model;

        using var context = ContextFactory.CreateDbContext();
        context.MPK_Samplings.Update(editModel);
        context.SaveChanges();

        return Task.CompletedTask;
    }

    private  Task Create(EditContext editcontext)
    {
        var username = authenticationStateTask.Result.User.Identity.Name;
        var  createModel = (MedicalPKSampling)editcontext.Model;
        createModel.Adminname = username;
        createModel.CreateTime = DateTime.Now;
        createModel.Guid = BingPatientInfo.Guid;
        createModel.Username = BingPatientInfo.Username;
        createModel.Medicalrecordnumber = BingPatientInfo.Medicalrecordnumber;

        //createModel.medicalPKSamplings = new List<MedicalPKSamplingsample>();
        //createModel.medicalPKSamplings.AddRange(Samplingsamples);

        using var context = ContextFactory.CreateDbContext();
        context.MPK_Samplings.Add(createModel);
        context.SaveChanges();
        return Task.CompletedTask;
    }

    /// <summary>
    /// 标本类型
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<string>> OnAutoSearchSpecimenType(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.SpecimenTypeEnum;
        return EnumItems.SpecimenTypeEnum.Where(x => x.Contains(value));
    }


    /// <summary>
    /// 给药频率
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<string>> OnAutoSearchDrugNCount(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.DrugNCountEnum;
        return EnumItems.DrugNCountEnum.Where(x => x.Contains(value));
    }


    /// <summary>
    /// 给药持续时间
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<string>> OnAutoSearchDrugNCountDuration(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.DrugNCountDurationEnum;
        return EnumItems.DrugNCountDurationEnum.Where(x => x.Contains(value));
    }

    /// <summary>
    /// 给药途径
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<string>> OnAutoSearchDrugdosageRoute(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.DrugdosageRouteEnum;
        return EnumItems.DrugdosageRouteEnum.Where(x => x.Contains(value));
    }

    /// <summary>
    /// 给药计量单位
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<string>> OnAutoSearchDrugdosageUnit(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.DrugdosageUnit;
        return EnumItems.DrugdosageUnit.Where(x => x.Contains(value));
    }

    private  Task OnBingPersonalFile(PatientInfo patient)
    {
        BingPatientInfo = patient;
        
        return Task.CompletedTask;
    }

    
    
}
