

@*DialogPersonalFile*@

@inject ISnackbar Snackbar
@attribute [Authorize]
<MudDialog>
    <TitleContent></TitleContent>
    <DialogContent>

        <MudStack Justify="Justify.Center">
            <MudText Align="Align.Center" >
                <MudAvatar  Image="img/logo.png"  Style="height:80px; width:80px; font-size:2rem;"></MudAvatar>
            </MudText>
            <MudText Align="Align.Center"  Typo="Typo.h6">基础档案信息</MudText>
        </MudStack>
       <EditForm Model="@patientInfo" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0" >
                <MudCardContent>
                    <MudGrid Spacing="3" Style="align-items:end" >
                        <MudItem  lg="6" md="6" xl="6" sm="12"  >
                            <MudStack   Row="false"  Spacing="1" >
                   
                                

                                  <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.CollationAttribute" For="@(() => patientInfo.CollationAttribute)" Label="病历属性" HelperText="用来归类分析当前档案是属于那个类型的疾病" Variant="Variant.Text" />
                                <MudStack Row="true">
                                    <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.Username" For="@(() => patientInfo.Username)" Label="姓名" Variant="Variant.Text" />
                                    <MudSelect  @bind-Value="@patientInfo.Gender" For="@(() => patientInfo.Gender)" Label="性别" Variant="Variant.Text" >
                                        @foreach (var item in EnumItems.SexItems)
                                        {
                                              <MudSelectItem Value="@item"></MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>
                                  <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.Medicalrecordnumber" For="@(() => patientInfo.Medicalrecordnumber)" Label="编号" Variant="Variant.Text" />
                                 <MudStack Row="true" AlignItems="AlignItems.End" >
                                    <MudText Align="Align.Left" Style="min-width:100px" >年龄（岁）:</MudText>
                                    <MudNumericField  HideSpinButtons="true" @bind-Value="@patientInfo.AGE" For="@(() => patientInfo.AGE)" Label="年" Variant="Variant.Text" Min="0" Max="200"/>
                                    <MudNumericField  HideSpinButtons="true" @bind-Value="@patientInfo.MonthAGE" For="@(() => patientInfo.MonthAGE)" Label="月" Variant="Variant.Text" Min="0" />
                                    <MudNumericField  HideSpinButtons="true" @bind-Value="@patientInfo.DayAGE" For="@(() => patientInfo.DayAGE)" Label="日" Variant="Variant.Text" Min="0" />
                                </MudStack>
                                 <MudStack Row="true" AlignItems="AlignItems.End">
                                    <MudText Align="Align.Left" Style="min-width:100px">体重:</MudText>
                                    <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.BW"  For="@(() => patientInfo.BW)" Label="重量" Variant="Variant.Text" />
                                    <MudSelect  @bind-Value="@patientInfo.BWWeight" For="@(() => patientInfo.BWWeight)" Label="单位" Variant="Variant.Text" >
                                        @foreach (var item in EnumItems.WeightEnum)
                                        {
                                              <MudSelectItem Value="@item"></MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudSelect  @bind-Value="@patientInfo.IsBWType" For="@(() => patientInfo.IsBWType)" Label="测量方式" Variant="Variant.Text" >
                                       @foreach (var item in EnumItems.Weighttype)
                                        {
                                              <MudSelectItem Value="@item"></MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>
                                 <MudStack Row="true">
                                    <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.HEI" For="@(() => patientInfo.HEI)" Label="身高" Variant="Variant.Text" />
                                    <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.BMI" For="@(() => patientInfo.BMI)" OnBlur="@OnBlur" Label="BIM" Variant="Variant.Text" />
                                    <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.BSA" For="@(() => patientInfo.BSA)" Label="体表面积" Variant="Variant.Text" />
                                </MudStack>
                                <MudStack Row="true">
                                    <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.INDiagnosis" For="@(() => patientInfo.INDiagnosis)" Label="入院诊断" Variant="Variant.Text" />
                                    <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.OUTDiagnosis" For="@(() => patientInfo.OUTDiagnosis)" Label="出院诊断" Variant="Variant.Text" />
                                </MudStack>
                            </MudStack>
                        </MudItem>
                        <MudItem lg="6" md="6" xl="6" sm="12"   >
                            <MudStack Row="false" Spacing="1" >
                                <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.Department"   For="@(() => patientInfo.Department)" Label="科室" HelperText="." Variant="Variant.Text" />
                                <MudStack Row="true">
                                    <MudDatePicker   @bind-Date="@patientInfo.Admissiontime" For="@(() => patientInfo.Admissiontime)" Label="入院时间" Variant="Variant.Text" />
                                    <MudDatePicker   @bind-Date="@patientInfo.Dischargetime" For="@(() => patientInfo.Dischargetime)"  Label="出院时间" Variant="Variant.Text" />
                                </MudStack>

                                <MudAutocomplete Dense="true" Margin="Margin.Dense" T="string" Label="移植类型" @bind-Value="@patientInfo.Transplantationtype" For="@(() => patientInfo.Transplantationtype)"
                                SearchFunc="@OnAutoSearch" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" />
                             
                                <MudDatePicker @bind-Value="@patientInfo.Transplantationtime" For="@(() => patientInfo.Transplantationtime)" Label="移植时间" Variant="Variant.Text" />
                                <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.GCS"   For="@(() => patientInfo.GCS)" Label="格拉斯哥评分（GCS）" Variant="Variant.Text" />
                                <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.SOFA" For="@(() => patientInfo.SOFA)" Label=" SOFA评分" Variant="Variant.Text" />
                                <MudTextField  Margin="Margin.Dense"  @bind-Value="@patientInfo.APACHEⅡ"  For="@(() => patientInfo.APACHEⅡ)" Label="入科APACHEⅡ评分" Variant="Variant.Text" />
                            </MudStack>
                        </MudItem>
                    </MudGrid>
             
                </MudCardContent>
                <MudCardActions  Class="my-2">
                    <MudStack Row="true" Justify="Justify.FlexEnd"  Style="width:100%" >
                        <MudButton OnClick="@(s=>MudDialog.Cancel())">取消</MudButton>
                        <MudButton StartIcon="@Icons.Outlined.Save"  ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" >保存</MudButton>
                    </MudStack>
                </MudCardActions>
   
            </MudCard>
        </EditForm>
    </DialogContent>
</MudDialog>
@code {

    [CascadingParameter]
    protected MudDialogInstance MudDialog { get; set; }



    //void Cancel() => MudDialog.Cancel();

    [Parameter]
    public PatientInfo?  patientInfo{ set; get; }

    [Parameter]
    public bool IsEdit { set; get; } = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    protected IDbContextFactory<MedicalDbContext> ContextFactory{ set; get; }


    private string sss{ set; get; }
    private int age{ set; get; }
    private string _year{ set; get; }
    private string _month{ set; get; }
    protected override void OnParametersSet()
    {
        if(patientInfo is null)
        {
            patientInfo = new PatientInfo();
        }
        base.OnParametersSet();
    }

    private async Task<IEnumerable<string>> OnAutoSearch(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.TransplantationEnum;
        return EnumItems.TransplantationEnum.Where(x => x.Contains(value));
    }

    private void OnValidSubmit(EditContext editcontext)
    {

        if (IsEdit)
        {
            Edit(editcontext);
        }
        else
        {
            Create(editcontext);

        }

        Snackbar.Add("个人档案添加成功",Severity.Success);
        StateHasChanged();
        MudDialog.Close(DialogResult.Ok((PatientInfo)editcontext.Model));
    }

    private  Task Create(EditContext editcontext)
    {
        var username = authenticationStateTask.Result.User.Identity.Name;

        var patient = (PatientInfo)editcontext.Model;
        patient.Adminname = username;
        patient.CreateTime = DateTime.Now;
        patient.Guid = Guid.NewGuid().ToString();


        using var context = ContextFactory.CreateDbContext();
        context.patientInfos.Add(patient);
        context.SaveChanges();
        return Task.CompletedTask;
    }

    private  Task Edit(EditContext editcontext)
    {

        var patient = (PatientInfo)editcontext.Model;

        using var context = ContextFactory.CreateDbContext();
        context.patientInfos.Update(patient);
        context.SaveChanges();

        return Task.CompletedTask;

    }

    private Task OnBlur()
    {
        patientInfo.BMI=PatientInfoExtend.GetBMI(patientInfo);
        patientInfo.BSA = PatientInfoExtend.GetBsa(patientInfo);
        StateHasChanged();
        return Task.CompletedTask;
    }
}
