
@inject ISnackbar Snackbar
@attribute [Authorize]

<MudDialog >
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3"/> 添加采血管
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@MedicalValue" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudCard Elevation="0" >
                <MudCardContent >
                        <MudAutocomplete Dense="true" Margin="Margin.Dense"  Clearable="true" T="string" Label="采血试管" @bind-Value="@MedicalValue.Collectingvessel" For="@(() => MedicalValue.Collectingvessel)"
                                                SearchFunc="OnAutoSearchCollectingvessel" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" />
                     
                    @*<MudTextField  Margin="Margin.Dense"   Margin="Margin.Dense"   @bind-Value="@MedicalValue.Collectingvessel" For="@(() => MedicalValue.Collectingvessel)" Label="采血管" Variant="Variant.Text" />*@
                    <MudTextField     Margin="Margin.Dense"   @bind-Value="@MedicalValue.SamplingNumber" For="@(() => MedicalValue.SamplingNumber)" Label="采样点" Variant="Variant.Text" />
                    <MudTextField     Margin="Margin.Dense"   @bind-Value="@MedicalValue.Number" For="@(() => MedicalValue.Number)" Label="编号" Variant="Variant.Text" />
                    <MudTextField     Margin="Margin.Dense"   @bind-Value="@MedicalValue.Samplingname" For="@(() => MedicalValue.Samplingname)" Label="抽血护士" Variant="Variant.Text" />
                    <MudTextField     Margin="Margin.Dense"  T="DateTime?" Format="s" InputType="InputType.DateTimeLocal"   @bind-Value="@MedicalValue.C1bloodcollectiontime" For="@(() => MedicalValue.C1bloodcollectiontime)" Label="采血时间" Variant="Variant.Text" />
                    
                    <MudStack Row="true">
                        <MudTextField    Margin="Margin.Dense"   @bind-Value="@MedicalValue.C1Concentration" For="@(() => MedicalValue.C1Concentration)" Label="浓度" Variant="Variant.Text" />

                              <MudAutocomplete Dense="true" Margin="Margin.Dense"  Clearable="true" T="string" Label="浓度单位" @bind-Value="@MedicalValue.C1ConcentrationUnit" For="@(() => MedicalValue.C1ConcentrationUnit)"
                                                SearchFunc="OnAutoSearchC1ConcentrationStandardUnit" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" />
                       @* <MudTextField  Margin="Margin.Dense"   Margin="Margin.Dense"   @bind-Value="@MedicalValue.C1ConcentrationUnit" For="@(() => MedicalValue.C1ConcentrationUnit)" Label="浓度单位" Variant="Variant.Text" />*@
                    </MudStack>

                    <MudStack Row="true">
                        <MudTextField   Margin="Margin.Dense"   @bind-Value="@MedicalValue.C1ConcentrationStandard" For="@(() => MedicalValue.C1ConcentrationStandard)" Label="标准化血药浓度" Variant="Variant.Text" />

                              <MudAutocomplete Dense="true" Margin="Margin.Dense"  Clearable="true" T="string" Label="标准化血药浓度单位" @bind-Value="@MedicalValue.C1ConcentrationStandardUnit" For="@(() => MedicalValue.C1ConcentrationStandardUnit)"
                                                SearchFunc="OnAutoSearchC1ConcentrationStandardUnit" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" />
                        @*<MudTextField  Margin="Margin.Dense"   Margin="Margin.Dense"   @bind-Value="@MedicalValue.C1ConcentrationStandardUnit" For="@(() => MedicalValue.C1ConcentrationStandardUnit)" Label="标准化血药浓度单位" Variant="Variant.Text" />*@
                    
                    </MudStack>

                     <MudAutocomplete Dense="true" Margin="Margin.Dense"  Clearable="true" T="string" Label="血浓度测试方法" @bind-Value="@MedicalValue.C1ConcentrationMethod" For="@(() => MedicalValue.C1ConcentrationMethod)"
                                                SearchFunc="OnAutoSearchC1ConcentrationMethod" ResetValueOnEmptyText="true" CoerceText="true" CoerceValue="true" />
                     @*  <MudTextField  Margin="Margin.Dense"   Margin="Margin.Dense"   @bind-Value="@MedicalValue.C1ConcentrationMethod" For="@(() => MedicalValue.C1ConcentrationMethod)" Label="浓度方法" Variant="Variant.Text" />*@
                 
                    <MudTextField   Margin="Margin.Dense"    @bind-Value="@MedicalValue.C1Remarks" For="@(() => MedicalValue.C1Remarks)" Label="备注" Variant="Variant.Text" />
                                         
                   
                </MudCardContent>
                <MudCardActions>
                     <MudStack Row="true" Justify="Justify.FlexEnd"  Style="width:100%" >
                       
                        @if (IsDelete)
                        {
                             <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="@(s=>Delete())" Class="px-10">删除</MudButton>
                        }
                        <MudButton Variant="Variant.Text" OnClick="@(s=>MudDialog.Cancel())" Class="px-10">取消</MudButton>
                        <MudButton StartIcon="@Icons.Outlined.Save"  ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" >确定</MudButton>
                     </MudStack>
                   
                </MudCardActions>
            </MudCard>
        </EditForm>    
    </DialogContent>
    <DialogActions>
        
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    /// <summary>
    /// 标识编辑进入  还是添加进入
    /// </summary>
    [Parameter]
    public bool IsEdit{ set; get; }




    [Parameter]
    public MedicalPKSamplingsample MedicalValue{ get; set; }

    private int rating { get; set; }= 4;

    // private void Submit() => MudDialog.Close();
    /// <summary>
    /// 是否删除数据
    /// </summary>
    [Parameter]
    public bool IsDelete { set; get; } = false;



    protected override Task OnParametersSetAsync()
    {

        if(MedicalValue is null)
        {
            MedicalValue = new MedicalPKSamplingsample();
        }
        return base.OnParametersSetAsync();
    }

    /// <summary>
    /// 表单提交
    /// </summary>
    /// <param name="editcontext"></param>
    private void OnValidSubmit(EditContext editcontext)
    {

        //if (BingPatientInfo is null) return;
        if (IsEdit)
        {
            Edit(editcontext);
            // Snackbar.Add("数据编辑修改成功",Severity.Success);
        }
        else
        {
            Create(editcontext);
            // Snackbar.Add("数据添加成功",Severity.Success);

        }
        MudDialog.Close(DialogResult.Ok(editcontext.Model));
    }
        /// <summary>
    /// 编辑数据
    /// </summary>
    /// <param name="editcontext"></param>
    /// <returns></returns>
    private  Task Edit(EditContext editcontext)
    {
        return Task.CompletedTask;
    }


    /// <summary>
    /// 删除数据
    /// </summary>
    /// <param name="editcontext"></param>
    /// <returns></returns>
    private  Task Delete()
    {
        MudDialog.Close(DialogResult.Ok(true));
        return Task.CompletedTask;
    }

    
    /// <summary>
    /// 添加数据
    /// </summary>
    /// <param name="editcontext"></param>
    /// <returns></returns>
    private  Task Create(EditContext editcontext)
    {
        return Task.CompletedTask;
    }


    /// <summary>
    /// 血浓度测试方式
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<string>> OnAutoSearchC1ConcentrationMethod(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.ConcentrationEnum;
        return EnumItems.ConcentrationEnum.Where(x => x.Contains(value));
    }

    

     /// <summary>
    /// 血浓度测试方式
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<string>> OnAutoSearchC1ConcentrationStandardUnit(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.ConcentrationWeightEnum;
        return EnumItems.ConcentrationWeightEnum.Where(x => x.Contains(value));
    }


    
    /// <summary>
    /// 采血试管
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private async Task<IEnumerable<string>> OnAutoSearchCollectingvessel(string value)
    {
        if (string.IsNullOrEmpty(value))
            return EnumItems.CollectingVesselEnum;
        return EnumItems.CollectingVesselEnum.Where(x => x.Contains(value));
    }


    //OnAutoSearchC1C1ConcentrationUnit
}
