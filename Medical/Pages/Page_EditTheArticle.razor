@*
@page "/edit/{Options:int}/{guid:string?}"


@layout EditLayout
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

@attribute [Authorize]

<PageTitle>写作</PageTitle>

    <EditForm  Model="@summaryReport" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator/>
        <MudStack Row="true">
            <MudButton StartIcon="@Icons.Outlined.Save"  ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" >保存</MudButton>
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
        </MudStack>
        <div style="background-color:rgb(255,255,255,0.2);backdrop-filter:blur(20px);border-radius:5px;padding:40px;">
            
            <BannerTitle Title="工作记录" TitleCaption="给予患者希望与力量，把简单与平凡演绎成无数个精彩。"></BannerTitle>

            <MudStack Row="false" Justify="Justify.Center" AlignItems="AlignItems.Stretch"  >
                <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="@summaryReport.Title"For="@(() => summaryReport.Title)"  Label="标题" ></MudTextField>
                <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="@summaryReport.Description" For="@(() => summaryReport.Description)"  Lines="3" Label="摘要" MaxLength="150" ></MudTextField>
                 <MudTextField T="string" Variant="Variant.Outlined" @bind-Value="summaryReport.keywordTag" For="@(() => summaryReport.keywordTag)"  Label="关键词" ></MudTextField>
            </MudStack>
    
         </div>
          <EditorComponent Content="@summaryReport.BodyContent" Toolbar="fullToolbar"></EditorComponent>
    </EditForm>

@code {

    private SummaryOfCases  summaryReport{ set; get; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    protected ILogger<Page_EditTheArticle> Logger{ set; get; }

    [Inject]
    protected IDbContextFactory<MedicalDbContext> DbContextFactory{ set; get; }


    [Parameter]
    public SummaryOfCasesOptions Options { set; get; }

    [Parameter]
    public string? guid { set; get; }

    [JSInvokable]
    public static Task<string> Upload(object file)
    {

        Console.WriteLine("Upload调用成功");
        return Task.FromResult("DONET调用js成功");
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (Options == SummaryOfCasesOptions.Edit)
        {
            using var cntext = DbContextFactory.CreateDbContext();
            summaryReport = await cntext.SummaryOfCases.SingleAsync(s => s.SummaryOfCasesGuid == guid);
        }
        else
        {
            summaryReport = NewSummaryreport();
        }
   
        await base.OnInitializedAsync();
    }

    protected SummaryOfCases NewSummaryreport()
    {

        var username = authenticationStateTask.Result.User.Identity.Name;
        return new SummaryOfCases()
            {
                Title = "",
                Description = "",
            
                keywordTag = "",
                BodyContent = "",
                Createtime = DateTime.Now,
                Adminname = username,
                IsFeatured = false,
                Ispublic = false,
                PublishedDate = DateTime.MinValue,
                SummaryOfCasesGuid = Guid.NewGuid().ToString(),

            };
    }


    /// <summary>
    /// 表单提交 ,保存文稿
    /// </summary>
    /// <param name="editcontext"></param>
     private async void OnValidSubmit(EditContext editcontext)
    {

        var  body  = (SummaryOfCases)editcontext.Model;
        body.BodyContent  =   await JS.InvokeAsync<string>("commonJsFunctions.getEditorValue", "");
        await Save(body);
        Snackbar.Add("文章保存成功",Severity.Success);
        //return Task.CompletedTask;
    }
    

    private async Task  Save( SummaryOfCases summaryreport)
    {
        using var context = DbContextFactory.CreateDbContext();
        context.SummaryOfCases.Add(summaryreport);
        await context.SaveChangesAsync();
        Navigation.NavigateTo("/guardianship");

    }
}
*@